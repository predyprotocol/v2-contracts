{
  "address": "0xf15109185A25EFa41e79139FCaE59b467B56214a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_perpetualMarketCoreAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quoteAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlyingAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecepient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultNFT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "issued",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositedToVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "hedger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBuyingUnderlying",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "name": "Hedged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subVaultIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "tradeAmount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFeePerPosition",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "deltaUsdcPosition",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "PositionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeRecepient",
          "type": "address"
        }
      ],
      "name": "SetFeeRecepient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burned",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawnFromVault",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_marginToAdd",
          "type": "int256"
        }
      ],
      "name": "addMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "execHedge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountUsdc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountUnderlying",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecepient",
      "outputs": [
        {
          "internalType": "contract IFeePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_deltaLiquidityAmount",
          "type": "int256"
        }
      ],
      "name": "getLPTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "internalType": "int128[2]",
          "name": "_tradeAmounts",
          "type": "int128[2]"
        }
      ],
      "name": "getMinCollateralToAddPosition",
      "outputs": [
        {
          "internalType": "int256",
          "name": "minCollateral",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenAmountForHedging",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "_tradeAmount",
          "type": "int128"
        }
      ],
      "name": "getTradePrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "tradePrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "indexPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "fundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "tradeFee",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "protocolFee",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "fundingFee",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "totalValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpetualMarket.TradeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "getTraderVault",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int128",
              "name": "positionUsdc",
              "type": "int128"
            },
            {
              "components": [
                {
                  "internalType": "int128[2]",
                  "name": "positionPerpetuals",
                  "type": "int128[2]"
                },
                {
                  "internalType": "uint128[2]",
                  "name": "entryPrices",
                  "type": "uint128[2]"
                },
                {
                  "internalType": "int256[2]",
                  "name": "entryFundingFee",
                  "type": "int256[2]"
                }
              ],
              "internalType": "struct TraderVaultLib.SubVault[]",
              "name": "subVaults",
              "type": "tuple[]"
            },
            {
              "internalType": "bool",
              "name": "isInsolvent",
              "type": "bool"
            }
          ],
          "internalType": "struct TraderVaultLib.TraderVault",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "getVaultStatus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "positionValue",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "minCollateral",
              "type": "int256"
            },
            {
              "internalType": "int256[2][]",
              "name": "positionValues",
              "type": "int256[2][]"
            },
            {
              "internalType": "int256[2][]",
              "name": "fundingPaid",
              "type": "int256[2][]"
            },
            {
              "components": [
                {
                  "internalType": "int128",
                  "name": "positionUsdc",
                  "type": "int128"
                },
                {
                  "components": [
                    {
                      "internalType": "int128[2]",
                      "name": "positionPerpetuals",
                      "type": "int128[2]"
                    },
                    {
                      "internalType": "uint128[2]",
                      "name": "entryPrices",
                      "type": "uint128[2]"
                    },
                    {
                      "internalType": "int256[2]",
                      "name": "entryFundingFee",
                      "type": "int256[2]"
                    }
                  ],
                  "internalType": "struct TraderVaultLib.SubVault[]",
                  "name": "subVaults",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bool",
                  "name": "isInsolvent",
                  "type": "bool"
                }
              ],
              "internalType": "struct TraderVaultLib.TraderVault",
              "name": "rawVaultData",
              "type": "tuple"
            }
          ],
          "internalType": "struct IPerpetualMarket.VaultStatus",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_initialFundingRate",
          "type": "int256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "liquidateByPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecepient",
          "type": "address"
        }
      ],
      "name": "setFeeRecepient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "vaultId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "productId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "subVaultIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "int128",
                  "name": "tradeAmount",
                  "type": "int128"
                },
                {
                  "internalType": "uint256",
                  "name": "limitPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IPerpetualMarket.TradeParams[]",
              "name": "trades",
              "type": "tuple[]"
            },
            {
              "internalType": "int256",
              "name": "marginAmount",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPerpetualMarket.MultiTradeParams",
          "name": "_tradeParams",
          "type": "tuple"
        }
      ],
      "name": "trade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_withdrawnAmount",
          "type": "uint128"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x08d235750c3c789f6d83d423b1a69ae54e5b32c56d544c829d362255ba234b3e",
  "receipt": {
    "to": null,
    "from": "0x4f071924D66BBC71A5254217893CC7D49938B1c4",
    "contractAddress": "0xf15109185A25EFa41e79139FCaE59b467B56214a",
    "transactionIndex": 0,
    "gasUsed": "63947754",
    "logsBloom": "0x
    "blockHash": "0xda2ed08b62a1c5f9d98f42844a14955bfbc0366130dfb09b64c7f4d983589359",
    "transactionHash": "0x08d235750c3c789f6d83d423b1a69ae54e5b32c56d544c829d362255ba234b3e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9394743,
        "transactionHash": "0x08d235750c3c789f6d83d423b1a69ae54e5b32c56d544c829d362255ba234b3e",
        "address": "0xf15109185A25EFa41e79139FCaE59b467B56214a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f071924d66bbc71a5254217893cc7d49938b1c4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xda2ed08b62a1c5f9d98f42844a14955bfbc0366130dfb09b64c7f4d983589359"
      }
    ],
    "blockNumber": 9394743,
    "cumulativeGasUsed": "29950534",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6282336687B0CE5b82292b86996Bb26411517B84",
    "0xff970a61a04b1ca14834a43f5de4533ebddb5cc8",
    "0x82af49447d8a07e3bd95bd0d56f35241523fbab1",
    "0xE17B52958aa4a3cEa4202B9893A0C7ae5bDaCEa5",
    "0xE2FF3D10A1288d508272E1f5142230693c580b19"
  ],
  "solcInputHash": "228a463cd5d6e4e6e63a99951ad2e9be",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_perpetualMarketCoreAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecepient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultNFT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositedToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hedger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuyingUnderlying\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"Hedged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeAmount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFeePerPosition\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"deltaUsdcPosition\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"PositionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecepient\",\"type\":\"address\"}],\"name\":\"SetFeeRecepient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnFromVault\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_marginToAdd\",\"type\":\"int256\"}],\"name\":\"addMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execHedge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUsdc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecepient\",\"outputs\":[{\"internalType\":\"contract IFeePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_deltaLiquidityAmount\",\"type\":\"int256\"}],\"name\":\"getLPTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"int128[2]\",\"name\":\"_tradeAmounts\",\"type\":\"int128[2]\"}],\"name\":\"getMinCollateralToAddPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"minCollateral\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAmountForHedging\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_tradeAmount\",\"type\":\"int128\"}],\"name\":\"getTradePrice\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"tradePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"indexPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"fundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradeFee\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"protocolFee\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpetualMarket.TradeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getTraderVault\",\"outputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"positionUsdc\",\"type\":\"int128\"},{\"components\":[{\"internalType\":\"int128[2]\",\"name\":\"positionPerpetuals\",\"type\":\"int128[2]\"},{\"internalType\":\"uint128[2]\",\"name\":\"entryPrices\",\"type\":\"uint128[2]\"},{\"internalType\":\"int256[2]\",\"name\":\"entryFundingFee\",\"type\":\"int256[2]\"}],\"internalType\":\"struct TraderVaultLib.SubVault[]\",\"name\":\"subVaults\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"isInsolvent\",\"type\":\"bool\"}],\"internalType\":\"struct TraderVaultLib.TraderVault\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"positionValue\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256[2][]\",\"name\":\"positionValues\",\"type\":\"int256[2][]\"},{\"internalType\":\"int256[2][]\",\"name\":\"fundingPaid\",\"type\":\"int256[2][]\"},{\"components\":[{\"internalType\":\"int128\",\"name\":\"positionUsdc\",\"type\":\"int128\"},{\"components\":[{\"internalType\":\"int128[2]\",\"name\":\"positionPerpetuals\",\"type\":\"int128[2]\"},{\"internalType\":\"uint128[2]\",\"name\":\"entryPrices\",\"type\":\"uint128[2]\"},{\"internalType\":\"int256[2]\",\"name\":\"entryFundingFee\",\"type\":\"int256[2]\"}],\"internalType\":\"struct TraderVaultLib.SubVault[]\",\"name\":\"subVaults\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"isInsolvent\",\"type\":\"bool\"}],\"internalType\":\"struct TraderVaultLib.TraderVault\",\"name\":\"rawVaultData\",\"type\":\"tuple\"}],\"internalType\":\"struct IPerpetualMarket.VaultStatus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_initialFundingRate\",\"type\":\"int256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"liquidateByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecepient\",\"type\":\"address\"}],\"name\":\"setFeeRecepient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"tradeAmount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"limitPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IPerpetualMarket.TradeParams[]\",\"name\":\"trades\",\"type\":\"tuple[]\"},{\"internalType\":\"int256\",\"name\":\"marginAmount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPerpetualMarket.MultiTradeParams\",\"name\":\"_tradeParams\",\"type\":\"tuple\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_withdrawnAmount\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addMargin(uint256,int256)\":{\"params\":{\"_marginToAdd\":\"amount of margin to add\",\"_vaultId\":\"id of the vault\"}},\"getLPTokenPrice(int256)\":{\"params\":{\"_deltaLiquidityAmount\":\"difference of liquidity If LPs want LP token price of deposit, _deltaLiquidityAmount is positive number of amount to deposit. On the other hand, if LPs want LP token price of withdrawal, _deltaLiquidityAmount is negative number of amount to withdraw.\"},\"returns\":{\"_0\":\"LP token price scaled by 1e6\"}},\"getMinCollateralToAddPosition(uint256,int128[2])\":{\"params\":{\"_tradeAmounts\":\"amounts to trade\",\"_vaultId\":\"The id of target vault\"},\"returns\":{\"minCollateral\":\"scaled by 1e6\"}},\"getTokenAmountForHedging()\":{\"returns\":{\"_0\":\"Amount of USDC and underlying reqired for hedging\"}},\"getTradePrice(uint256,int128)\":{\"params\":{\"_productId\":\"product id\",\"_tradeAmount\":\"amount of position to trade. positive to get long price and negative to get short price.\"},\"returns\":{\"_0\":\"trade info\"}},\"getVaultStatus(uint256)\":{\"params\":{\"_vaultId\":\"The id of target vault\"},\"returns\":{\"_0\":\"vault status\"}},\"initialize(uint256,int256)\":{\"params\":{\"_depositAmount\":\"deposit amount\",\"_initialFundingRate\":\"initial funding rate\"}},\"liquidateByPool(uint256)\":{\"params\":{\"_vaultId\":\"The id of target vault\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFeeRecepient(address)\":{\"params\":{\"_feeRecepient\":\"The address of new fee recepient\"}},\"trade((uint256,(uint256,uint256,int128,uint256,bytes)[],int256,uint256))\":{\"params\":{\"_tradeParams\":\"trade parameters\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"LIQUIDATION_FEE\":{\"details\":\"liquidation fee is 20%\"}},\"title\":\"Perpetual Market\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMargin(uint256,int256)\":{\"notice\":\"Add margin to the vault\"},\"constructor\":{\"notice\":\"Constructor of Perpetual Market contract\"},\"deposit(uint256)\":{\"notice\":\"Provides liquidity to the pool and mints LP tokens\"},\"execHedge()\":{\"notice\":\"Executes hedging\"},\"getLPTokenPrice(int256)\":{\"notice\":\"Gets current LP token price\"},\"getMinCollateralToAddPosition(uint256,int128[2])\":{\"notice\":\"Gets value of min collateral to add positions\"},\"getTokenAmountForHedging()\":{\"notice\":\"Gets token amount for hedging\"},\"getTradePrice(uint256,int128)\":{\"notice\":\"Gets trade price\"},\"getVaultStatus(uint256)\":{\"notice\":\"Gets position value of a vault\"},\"initialize(uint256,int256)\":{\"notice\":\"Initializes Perpetual Pool\"},\"liquidateByPool(uint256)\":{\"notice\":\"Liquidates a vault by Pool Anyone can liquidate a vault whose PositionValue is less than MinCollateral. The caller gets a portion of the margin as reward.\"},\"setFeeRecepient(address)\":{\"notice\":\"Sets new fee recepient\"},\"trade((uint256,(uint256,uint256,int128,uint256,bytes)[],int256,uint256))\":{\"notice\":\"Opens new positions or closes hold position of the perpetual contracts and manage margin in the vault at the same time.\"},\"withdraw(uint128)\":{\"notice\":\"Withdraws liquidity from the pool and burn LP tokens\"}},\"notice\":\"Perpetual Market Contract is entry point of traders and liquidity providers. It manages traders' vault storage and holds funds from traders and liquidity providers. Error Codes PM0: tx exceed deadline PM1: limit price PM2: caller is not vault owner PM3: vault not found\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PerpetualMarket.sol\":\"PerpetualMarket\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xba085261d44cf28d2583f7c8cdb2f0a6a495ff1a640f86d995ea9d36b42b0046\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x79004a1d1471abe87e92c4497acba06d5dfa5b1f3e9894a0991a7c4669c5c02c\",\"license\":\"MIT\"},\"contracts/PerpetualMarket.sol\":{\"content\":\"//SPDX-License-Identifier: agpl-3.0\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/IFeePool.sol\\\";\\nimport \\\"./interfaces/IPerpetualMarketCore.sol\\\";\\nimport \\\"./interfaces/IPerpetualMarket.sol\\\";\\nimport \\\"./base/BaseLiquidityPool.sol\\\";\\nimport \\\"./lib/TraderVaultLib.sol\\\";\\nimport \\\"./interfaces/IVaultNFT.sol\\\";\\n\\n/**\\n * @title Perpetual Market\\n * @notice Perpetual Market Contract is entry point of traders and liquidity providers.\\n * It manages traders' vault storage and holds funds from traders and liquidity providers.\\n *\\n * Error Codes\\n * PM0: tx exceed deadline\\n * PM1: limit price\\n * PM2: caller is not vault owner\\n * PM3: vault not found\\n */\\ncontract PerpetualMarket is IPerpetualMarket, BaseLiquidityPool, Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeCast for int256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using SignedSafeMath for int128;\\n    using TraderVaultLib for TraderVaultLib.TraderVault;\\n\\n    uint256 private constant MAX_PRODUCT_ID = 2;\\n\\n    /// @dev liquidation fee is 20%\\n    int256 private constant LIQUIDATION_FEE = 2000;\\n\\n    IPerpetualMarketCore private immutable perpetualMarketCore;\\n\\n    // Fee recepient address\\n    IFeePool public feeRecepient;\\n\\n    address private vaultNFT;\\n\\n    // trader's vaults storage\\n    mapping(uint256 => TraderVaultLib.TraderVault) private traderVaults;\\n\\n    event Deposited(address indexed account, uint256 issued, uint256 amount);\\n\\n    event Withdrawn(address indexed account, uint256 burned, uint256 amount);\\n\\n    event PositionUpdated(\\n        address indexed trader,\\n        uint256 vaultId,\\n        uint256 subVaultIndex,\\n        uint256 productId,\\n        int256 tradeAmount,\\n        uint256 tradePrice,\\n        int256 fundingFeePerPosition,\\n        int256 deltaUsdcPosition,\\n        bytes metadata\\n    );\\n    event DepositedToVault(address indexed trader, uint256 vaultId, uint256 amount);\\n    event WithdrawnFromVault(address indexed trader, uint256 vaultId, uint256 amount);\\n    event Liquidated(address liquidator, uint256 indexed vaultId, uint256 reward);\\n\\n    event Hedged(address hedger, bool isBuyingUnderlying, uint256 usdcAmount, uint256 underlyingAmount);\\n\\n    event SetFeeRecepient(address feeRecepient);\\n\\n    /**\\n     * @notice Constructor of Perpetual Market contract\\n     */\\n    constructor(\\n        address _perpetualMarketCoreAddress,\\n        address _quoteAsset,\\n        address _underlyingAsset,\\n        address _feeRecepient,\\n        address _vaultNFT\\n    ) BaseLiquidityPool(_quoteAsset, _underlyingAsset) {\\n        require(_feeRecepient != address(0));\\n\\n        perpetualMarketCore = IPerpetualMarketCore(_perpetualMarketCoreAddress);\\n        feeRecepient = IFeePool(_feeRecepient);\\n        vaultNFT = _vaultNFT;\\n    }\\n\\n    /**\\n     * @notice Initializes Perpetual Pool\\n     * @param _depositAmount deposit amount\\n     * @param _initialFundingRate initial funding rate\\n     */\\n    function initialize(uint256 _depositAmount, int256 _initialFundingRate) external override {\\n        require(_depositAmount > 0 && _initialFundingRate > 0);\\n\\n        uint256 lpTokenAmount = perpetualMarketCore.initialize(msg.sender, _depositAmount * 1e2, _initialFundingRate);\\n\\n        IERC20(quoteAsset).safeTransferFrom(msg.sender, address(this), _depositAmount);\\n\\n        emit Deposited(msg.sender, lpTokenAmount, _depositAmount);\\n    }\\n\\n    /**\\n     * @notice Provides liquidity to the pool and mints LP tokens\\n     */\\n    function deposit(uint256 _depositAmount) external override {\\n        require(_depositAmount > 0);\\n\\n        // Funding payment should be proceeded before deposit\\n        perpetualMarketCore.executeFundingPayment();\\n\\n        uint256 lpTokenAmount = perpetualMarketCore.deposit(msg.sender, _depositAmount * 1e2);\\n\\n        IERC20(quoteAsset).safeTransferFrom(msg.sender, address(this), _depositAmount);\\n\\n        emit Deposited(msg.sender, lpTokenAmount, _depositAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity from the pool and burn LP tokens\\n     */\\n    function withdraw(uint128 _withdrawnAmount) external override {\\n        require(_withdrawnAmount > 0);\\n\\n        // Funding payment should be proceeded before withdrawal\\n        perpetualMarketCore.executeFundingPayment();\\n\\n        uint256 lpTokenAmount = perpetualMarketCore.withdraw(msg.sender, _withdrawnAmount * 1e2);\\n\\n        // Send liquidity to msg.sender\\n        sendLiquidity(msg.sender, _withdrawnAmount);\\n\\n        emit Withdrawn(msg.sender, lpTokenAmount, _withdrawnAmount);\\n    }\\n\\n    /**\\n     * @notice Opens new positions or closes hold position of the perpetual contracts\\n     * and manage margin in the vault at the same time.\\n     * @param _tradeParams trade parameters\\n     */\\n    function trade(MultiTradeParams memory _tradeParams) external override {\\n        // check the transaction not exceed deadline\\n        require(_tradeParams.deadline == 0 || _tradeParams.deadline >= block.number, \\\"PM0\\\");\\n\\n        if (_tradeParams.vaultId == 0) {\\n            // open new vault\\n            _tradeParams.vaultId = IVaultNFT(vaultNFT).mintNFT(msg.sender);\\n        } else {\\n            // check caller is vault owner\\n            require(IVaultNFT(vaultNFT).ownerOf(_tradeParams.vaultId) == msg.sender, \\\"PM2\\\");\\n        }\\n\\n        // funding payment should bee proceeded before trade\\n        perpetualMarketCore.executeFundingPayment();\\n\\n        uint256 totalProtocolFee;\\n\\n        for (uint256 i = 0; i < _tradeParams.trades.length; i++) {\\n            totalProtocolFee = totalProtocolFee.add(\\n                updatePosition(\\n                    traderVaults[_tradeParams.vaultId],\\n                    _tradeParams.trades[i].productId,\\n                    _tradeParams.vaultId,\\n                    _tradeParams.trades[i].subVaultIndex,\\n                    _tradeParams.trades[i].tradeAmount,\\n                    _tradeParams.trades[i].limitPrice,\\n                    _tradeParams.trades[i].metadata\\n                )\\n            );\\n        }\\n\\n        // Add protocol fee\\n        if (totalProtocolFee > 0) {\\n            IERC20(quoteAsset).approve(address(feeRecepient), totalProtocolFee);\\n            feeRecepient.sendProfitERC20(address(this), totalProtocolFee);\\n        }\\n\\n        int256 finalDepositOrWithdrawAmount;\\n\\n        finalDepositOrWithdrawAmount = traderVaults[_tradeParams.vaultId].updateUsdcPosition(\\n            _tradeParams.marginAmount.mul(1e2),\\n            perpetualMarketCore.getTradePriceInfo(traderVaults[_tradeParams.vaultId].getPositionPerpetuals())\\n        );\\n\\n        // Try to update variance after trade\\n        perpetualMarketCore.updatePoolSnapshot();\\n\\n        if (finalDepositOrWithdrawAmount > 0) {\\n            uint256 depositAmount = uint256(finalDepositOrWithdrawAmount / 1e2);\\n            IERC20(quoteAsset).safeTransferFrom(msg.sender, address(this), depositAmount);\\n            emit DepositedToVault(msg.sender, _tradeParams.vaultId, depositAmount);\\n        } else if (finalDepositOrWithdrawAmount < 0) {\\n            uint256 withdrawAmount = uint256(-finalDepositOrWithdrawAmount) / 1e2;\\n            sendLiquidity(msg.sender, withdrawAmount);\\n            emit WithdrawnFromVault(msg.sender, _tradeParams.vaultId, withdrawAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add margin to the vault\\n     * @param _vaultId id of the vault\\n     * @param _marginToAdd amount of margin to add\\n     */\\n    function addMargin(uint256 _vaultId, int256 _marginToAdd) external override {\\n        require(_vaultId > 0 && _vaultId < IVaultNFT(vaultNFT).nextId(), \\\"PM3\\\");\\n\\n        // increase USDC position\\n        traderVaults[_vaultId].addUsdcPosition(_marginToAdd.mul(1e2));\\n\\n        // receive USDC from caller\\n        uint256 depositAmount = _marginToAdd.toUint256();\\n        IERC20(quoteAsset).safeTransferFrom(msg.sender, address(this), depositAmount);\\n\\n        // emit event\\n        emit DepositedToVault(msg.sender, _vaultId, depositAmount);\\n    }\\n\\n    /**\\n     * @notice Liquidates a vault by Pool\\n     * Anyone can liquidate a vault whose PositionValue is less than MinCollateral.\\n     * The caller gets a portion of the margin as reward.\\n     * @param _vaultId The id of target vault\\n     */\\n    function liquidateByPool(uint256 _vaultId) external override {\\n        // funding payment should bee proceeded before liquidation\\n        perpetualMarketCore.executeFundingPayment();\\n\\n        TraderVaultLib.TraderVault storage traderVault = traderVaults[_vaultId];\\n\\n        IPerpetualMarketCore.TradePriceInfo memory tradePriceInfo = perpetualMarketCore.getTradePriceInfo(\\n            traderVault.getPositionPerpetuals()\\n        );\\n\\n        // Check if PositionValue is less than MinCollateral or not\\n        require(traderVault.checkVaultIsLiquidatable(tradePriceInfo), \\\"vault is not danger\\\");\\n\\n        int256 minCollateral = traderVault.getMinCollateral(tradePriceInfo);\\n\\n        // Close all positions in the vault\\n        uint256 totalProtocolFee;\\n        for (uint256 subVaultIndex = 0; subVaultIndex < traderVault.subVaults.length; subVaultIndex++) {\\n            for (uint256 productId = 0; productId < MAX_PRODUCT_ID; productId++) {\\n                int128 amountAssetInVault = traderVault.subVaults[subVaultIndex].positionPerpetuals[productId];\\n\\n                totalProtocolFee = totalProtocolFee.add(\\n                    updatePosition(traderVault, productId, _vaultId, subVaultIndex, -amountAssetInVault, 0, \\\"\\\")\\n                );\\n            }\\n        }\\n\\n        traderVault.setInsolvencyFlagIfNeeded();\\n\\n        uint256 reward = traderVault.decreaseLiquidationReward(minCollateral, LIQUIDATION_FEE);\\n\\n        // Sends a half of reward to the pool\\n        perpetualMarketCore.addLiquidity(reward / 2);\\n\\n        // Sends a half of reward to the liquidator\\n        sendLiquidity(msg.sender, reward / (2 * 1e2));\\n\\n        // Try to update variance after liquidation\\n        perpetualMarketCore.updatePoolSnapshot();\\n\\n        // Sends protocol fee\\n        if (totalProtocolFee > 0) {\\n            IERC20(quoteAsset).approve(address(feeRecepient), totalProtocolFee);\\n            feeRecepient.sendProfitERC20(address(this), totalProtocolFee);\\n        }\\n\\n        emit Liquidated(msg.sender, _vaultId, reward);\\n    }\\n\\n    function updatePosition(\\n        TraderVaultLib.TraderVault storage _traderVault,\\n        uint256 _productId,\\n        uint256 _vaultId,\\n        uint256 _subVaultIndex,\\n        int128 _tradeAmount,\\n        uint256 _limitPrice,\\n        bytes memory _metadata\\n    ) internal returns (uint256) {\\n        if (_tradeAmount != 0) {\\n            (uint256 tradePrice, int256 fundingFeePerPosition, uint256 protocolFee) = perpetualMarketCore\\n                .updatePoolPosition(_productId, _tradeAmount);\\n\\n            require(checkPrice(_tradeAmount > 0, tradePrice, _limitPrice), \\\"PM1\\\");\\n\\n            int256 deltaUsdcPosition = _traderVault.updateVault(\\n                _subVaultIndex,\\n                _productId,\\n                _tradeAmount,\\n                tradePrice,\\n                fundingFeePerPosition\\n            );\\n\\n            emit PositionUpdated(\\n                msg.sender,\\n                _vaultId,\\n                _subVaultIndex,\\n                _productId,\\n                _tradeAmount,\\n                tradePrice,\\n                fundingFeePerPosition,\\n                deltaUsdcPosition,\\n                _metadata\\n            );\\n\\n            return protocolFee / 1e2;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Gets token amount for hedging\\n     * @return Amount of USDC and underlying reqired for hedging\\n     */\\n    function getTokenAmountForHedging()\\n        external\\n        view\\n        override\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        NettingLib.CompleteParams memory completeParams = perpetualMarketCore.getTokenAmountForHedging();\\n\\n        return (\\n            completeParams.isLong,\\n            completeParams.amountUsdc / 1e2,\\n            Math.scale(completeParams.amountUnderlying, 8, ERC20(underlyingAsset).decimals())\\n        );\\n    }\\n\\n    /**\\n     * @notice Executes hedging\\n     */\\n    function execHedge() external override returns (uint256 amountUsdc, uint256 amountUnderlying) {\\n        // execute funding payment\\n        perpetualMarketCore.executeFundingPayment();\\n\\n        // Try to update variance after funding payment\\n        perpetualMarketCore.updatePoolSnapshot();\\n\\n        // rebalance\\n        perpetualMarketCore.rebalance();\\n\\n        NettingLib.CompleteParams memory completeParams = perpetualMarketCore.getTokenAmountForHedging();\\n\\n        perpetualMarketCore.completeHedgingProcedure(completeParams);\\n\\n        amountUsdc = completeParams.amountUsdc / 1e2;\\n        amountUnderlying = Math.scale(completeParams.amountUnderlying, 8, ERC20(underlyingAsset).decimals());\\n\\n        if (completeParams.isLong) {\\n            IERC20(underlyingAsset).safeTransferFrom(msg.sender, address(this), amountUnderlying);\\n            sendLiquidity(msg.sender, amountUsdc);\\n        } else {\\n            IERC20(quoteAsset).safeTransferFrom(msg.sender, address(this), amountUsdc);\\n            sendUndrlying(msg.sender, amountUnderlying);\\n        }\\n\\n        emit Hedged(msg.sender, completeParams.isLong, amountUsdc, amountUnderlying);\\n    }\\n\\n    /**\\n     * @notice Compares trade price and limit price\\n     * For long, if trade price is less than limit price then return true.\\n     * For short, if trade price is greater than limit price then return true.\\n     * if limit price is 0 then always return true.\\n     * @param _isLong true if the trade is long and false if the trade is short\\n     * @param _tradePrice trade price per trade amount\\n     * @param _limitPrice the worst price the trader accept\\n     */\\n    function checkPrice(\\n        bool _isLong,\\n        uint256 _tradePrice,\\n        uint256 _limitPrice\\n    ) internal pure returns (bool) {\\n        if (_limitPrice == 0) {\\n            return true;\\n        }\\n        if (_isLong) {\\n            return _tradePrice <= _limitPrice;\\n        } else {\\n            return _tradePrice >= _limitPrice;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets current LP token price\\n     * @param _deltaLiquidityAmount difference of liquidity\\n     * If LPs want LP token price of deposit, _deltaLiquidityAmount is positive number of amount to deposit.\\n     * On the other hand, if LPs want LP token price of withdrawal, _deltaLiquidityAmount is negative number of amount to withdraw.\\n     * @return LP token price scaled by 1e6\\n     */\\n    function getLPTokenPrice(int256 _deltaLiquidityAmount) external view override returns (uint256) {\\n        return perpetualMarketCore.getLPTokenPrice(_deltaLiquidityAmount);\\n    }\\n\\n    /**\\n     * @notice Gets trade price\\n     * @param _productId product id\\n     * @param _tradeAmount amount of position to trade. positive to get long price and negative to get short price.\\n     * @return trade info\\n     */\\n    function getTradePrice(uint256 _productId, int128 _tradeAmount) external view override returns (TradeInfo memory) {\\n        (\\n            int256 tradePrice,\\n            int256 indexPrice,\\n            int256 fundingRate,\\n            int256 tradeFee,\\n            int256 protocolFee\\n        ) = perpetualMarketCore.getTradePrice(_productId, _tradeAmount);\\n\\n        return\\n            TradeInfo(\\n                tradePrice,\\n                indexPrice,\\n                fundingRate,\\n                tradeFee,\\n                protocolFee,\\n                indexPrice.mul(fundingRate).div(1e16),\\n                tradePrice.toUint256().mul(Math.abs(_tradeAmount)).div(1e8),\\n                tradeFee.toUint256().mul(Math.abs(_tradeAmount)).div(1e8)\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets value of min collateral to add positions\\n     * @param _vaultId The id of target vault\\n     * @param _tradeAmounts amounts to trade\\n     * @return minCollateral scaled by 1e6\\n     */\\n    function getMinCollateralToAddPosition(uint256 _vaultId, int128[2] memory _tradeAmounts)\\n        external\\n        view\\n        override\\n        returns (int256 minCollateral)\\n    {\\n        TraderVaultLib.TraderVault memory traderVault = traderVaults[_vaultId];\\n\\n        minCollateral = traderVault.getMinCollateralToAddPosition(\\n            _tradeAmounts,\\n            perpetualMarketCore.getTradePriceInfo(traderVault.getPositionPerpetuals())\\n        );\\n\\n        minCollateral = minCollateral / 1e2;\\n    }\\n\\n    function getTraderVault(uint256 _vaultId) external view override returns (TraderVaultLib.TraderVault memory) {\\n        return traderVaults[_vaultId];\\n    }\\n\\n    /**\\n     * @notice Gets position value of a vault\\n     * @param _vaultId The id of target vault\\n     * @return vault status\\n     */\\n    function getVaultStatus(uint256 _vaultId) external view override returns (VaultStatus memory) {\\n        TraderVaultLib.TraderVault memory traderVault = traderVaults[_vaultId];\\n\\n        IPerpetualMarketCore.TradePriceInfo memory tradePriceInfo = perpetualMarketCore.getTradePriceInfo(\\n            traderVault.getPositionPerpetuals()\\n        );\\n\\n        int256[2][] memory positionValues = new int256[2][](traderVault.subVaults.length);\\n        int256[2][] memory fundingPaid = new int256[2][](traderVault.subVaults.length);\\n\\n        for (uint256 i = 0; i < traderVault.subVaults.length; i++) {\\n            for (uint256 j = 0; j < MAX_PRODUCT_ID; j++) {\\n                positionValues[i][j] = TraderVaultLib.getPerpetualValueOfSubVault(\\n                    traderVault.subVaults[i],\\n                    j,\\n                    tradePriceInfo\\n                );\\n                fundingPaid[i][j] = TraderVaultLib.getFundingFeePaidOfSubVault(\\n                    traderVault.subVaults[i],\\n                    j,\\n                    tradePriceInfo.amountsFundingPaidPerPosition\\n                );\\n            }\\n        }\\n\\n        return\\n            VaultStatus(\\n                traderVault.getPositionValue(tradePriceInfo),\\n                traderVault.getMinCollateral(tradePriceInfo),\\n                positionValues,\\n                fundingPaid,\\n                traderVault\\n            );\\n    }\\n\\n    /////////////////////////\\n    //  Admin Functions    //\\n    /////////////////////////\\n\\n    /**\\n     * @notice Sets new fee recepient\\n     * @param _feeRecepient The address of new fee recepient\\n     */\\n    function setFeeRecepient(address _feeRecepient) external onlyOwner {\\n        require(_feeRecepient != address(0));\\n        feeRecepient = IFeePool(_feeRecepient);\\n        emit SetFeeRecepient(_feeRecepient);\\n    }\\n}\\n\",\"keccak256\":\"0x1fb396518b2118f177a6c8ec0b6997d3910339d8a6ac7880d73b78ebbcf8c3de\",\"license\":\"agpl-3.0\"},\"contracts/base/BaseLiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/**\\n * @title Base Liquidity Pool\\n * @notice Base Liquidity Pool Contract\\n */\\nabstract contract BaseLiquidityPool {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable quoteAsset;\\n    address public immutable underlyingAsset;\\n\\n    /**\\n     * @notice initialize liquidity pool\\n     */\\n    constructor(address _quoteAsset, address _underlyingAsset) {\\n        require(_quoteAsset != address(0));\\n        require(_underlyingAsset != address(0));\\n\\n        quoteAsset = _quoteAsset;\\n        underlyingAsset = _underlyingAsset;\\n    }\\n\\n    function sendLiquidity(address _recipient, uint256 _amount) internal {\\n        IERC20(quoteAsset).safeTransfer(_recipient, _amount);\\n    }\\n\\n    function sendUndrlying(address _recipient, uint256 _amount) internal {\\n        IERC20(underlyingAsset).safeTransfer(_recipient, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1638bbb0bb10c0f3caee4397fde0aacce3750b347993e8145bdd8732b678ab93\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IFeePool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity =0.7.6;\\n\\ninterface IFeePool {\\n    function sendProfitERC20(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x9b27b859ab6ce599b9933054e8ac79f2ee7b4ffecf591aac0c03993a6fdd44e5\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IPerpetualMarket.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../lib/TraderVaultLib.sol\\\";\\n\\ninterface IPerpetualMarket {\\n    struct MultiTradeParams {\\n        uint256 vaultId;\\n        TradeParams[] trades;\\n        int256 marginAmount;\\n        uint256 deadline;\\n    }\\n\\n    struct TradeParams {\\n        uint256 productId;\\n        uint256 subVaultIndex;\\n        int128 tradeAmount;\\n        uint256 limitPrice;\\n        bytes metadata;\\n    }\\n\\n    struct VaultStatus {\\n        int256 positionValue;\\n        int256 minCollateral;\\n        int256[2][] positionValues;\\n        int256[2][] fundingPaid;\\n        TraderVaultLib.TraderVault rawVaultData;\\n    }\\n\\n    struct TradeInfo {\\n        int256 tradePrice;\\n        int256 indexPrice;\\n        int256 fundingRate;\\n        int256 tradeFee;\\n        int256 protocolFee;\\n        int256 fundingFee;\\n        uint256 totalValue;\\n        uint256 totalFee;\\n    }\\n\\n    function initialize(uint256 _depositAmount, int256 _initialFundingRate) external;\\n\\n    function deposit(uint256 _depositAmount) external;\\n\\n    function withdraw(uint128 _withdrawnAmount) external;\\n\\n    function trade(MultiTradeParams memory _tradeParams) external;\\n\\n    function addMargin(uint256 _vaultId, int256 _marginToAdd) external;\\n\\n    function liquidateByPool(uint256 _vaultId) external;\\n\\n    function getTokenAmountForHedging()\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    function execHedge() external returns (uint256 amountUsdc, uint256 amountUnderlying);\\n\\n    function getLPTokenPrice(int256 _deltaLiquidityAmount) external view returns (uint256);\\n\\n    function getTradePrice(uint256 _productId, int128 _tradeAmount)\\n        external\\n        view\\n        returns (TradeInfo memory tradePriceInfo);\\n\\n    function getMinCollateralToAddPosition(uint256 _vaultId, int128[2] memory _tradeAmounts)\\n        external\\n        view\\n        returns (int256 minCollateral);\\n\\n    function getTraderVault(uint256 _vaultId) external view returns (TraderVaultLib.TraderVault memory);\\n\\n    function getVaultStatus(uint256 _vaultId) external view returns (VaultStatus memory);\\n}\\n\",\"keccak256\":\"0xb0fa91dcda56b5d5a328354deb566dcdf263da3b0114890a85e0b831d4052513\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IPerpetualMarketCore.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../lib/NettingLib.sol\\\";\\n\\ninterface IPerpetualMarketCore {\\n    struct TradePriceInfo {\\n        uint128 spotPrice;\\n        int256[2] tradePrices;\\n        int256[2] fundingRates;\\n        int256[2] amountsFundingPaidPerPosition;\\n    }\\n\\n    function initialize(\\n        address _depositor,\\n        uint256 _depositAmount,\\n        int256 _initialFundingRate\\n    ) external returns (uint256 mintAmount);\\n\\n    function deposit(address _depositor, uint256 _depositAmount) external returns (uint256 mintAmount);\\n\\n    function withdraw(address _withdrawer, uint256 _withdrawnAmount) external returns (uint256 burnAmount);\\n\\n    function addLiquidity(uint256 _amount) external;\\n\\n    function updatePoolPosition(uint256 _productId, int128 _tradeAmount)\\n        external\\n        returns (\\n            uint256 tradePrice,\\n            int256,\\n            uint256 protocolFee\\n        );\\n\\n    function completeHedgingProcedure(NettingLib.CompleteParams memory _completeParams) external;\\n\\n    function updatePoolSnapshot() external;\\n\\n    function executeFundingPayment() external;\\n\\n    function getTradePriceInfo(int128[2] memory amountAssets) external view returns (TradePriceInfo memory);\\n\\n    function getTradePrice(uint256 _productId, int128 _tradeAmount)\\n        external\\n        view\\n        returns (\\n            int256,\\n            int256,\\n            int256,\\n            int256,\\n            int256\\n        );\\n\\n    function rebalance() external;\\n\\n    function getTokenAmountForHedging() external view returns (NettingLib.CompleteParams memory completeParams);\\n\\n    function getLPTokenPrice(int256 _deltaLiquidityAmount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa60a4fe4d32fb3b44967680b215eeb8aac80a5847e5389a346ae1dfdfa4197fe\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IVaultNFT.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IVaultNFT is IERC721 {\\n    function nextId() external returns (uint256);\\n\\n    function mintNFT(address _recipient) external returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0x24579c7330ce36c6115b8767566670ff7ae48f51b773ac3afc105478cd7070f1\",\"license\":\"agpl-3.0\"},\"contracts/lib/EntryPriceMath.sol\":{\"content\":\"//SPDX-License-Identifier: agpl-3.0\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"./Math.sol\\\";\\n\\n/**\\n * @title EntryPriceMath\\n * @notice Library contract which has functions to calculate new entry price and profit\\n * from previous entry price and trade price for implementing margin wallet.\\n */\\nlibrary EntryPriceMath {\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    /**\\n     * @notice Calculates new entry price and return profit if position is closed\\n     *\\n     * Calculation Patterns\\n     *  |Position|PositionTrade|NewPosition|Pattern|\\n     *  |       +|            +|          +|      A|\\n     *  |       +|            -|          +|      B|\\n     *  |       +|            -|          -|      C|\\n     *  |       -|            -|          -|      A|\\n     *  |       -|            +|          -|      B|\\n     *  |       -|            +|          +|      C|\\n     *\\n     * Calculations\\n     *  Pattern A (open positions)\\n     *   NewEntryPrice = (EntryPrice * |Position| + TradePrce * |PositionTrade|) / (Position + PositionTrade)\\n     *\\n     *  Pattern B (close positions)\\n     *   NewEntryPrice = EntryPrice\\n     *   ProfitValue = -PositionTrade * (TradePrice - EntryPrice)\\n     *\\n     *  Pattern C (close all positions & open new)\\n     *   NewEntryPrice = TradePrice\\n     *   ProfitValue = Position * (TradePrice - EntryPrice)\\n     *\\n     * @param _entryPrice previous entry price\\n     * @param _position current position\\n     * @param _tradePrice trade price\\n     * @param _positionTrade position to trade\\n     * @return newEntryPrice new entry price\\n     * @return profitValue notional profit value when positions are closed\\n     */\\n    function updateEntryPrice(\\n        int256 _entryPrice,\\n        int256 _position,\\n        int256 _tradePrice,\\n        int256 _positionTrade\\n    ) internal pure returns (int256 newEntryPrice, int256 profitValue) {\\n        int256 newPosition = _position.add(_positionTrade);\\n        if (_position == 0 || (_position > 0 && _positionTrade > 0) || (_position < 0 && _positionTrade < 0)) {\\n            newEntryPrice = (\\n                _entryPrice.mul(int256(Math.abs(_position))).add(_tradePrice.mul(int256(Math.abs(_positionTrade))))\\n            ).div(int256(Math.abs(_position.add(_positionTrade))));\\n        } else if (\\n            (_position > 0 && _positionTrade < 0 && newPosition > 0) ||\\n            (_position < 0 && _positionTrade > 0 && newPosition < 0)\\n        ) {\\n            newEntryPrice = _entryPrice;\\n            profitValue = (-_positionTrade).mul(_tradePrice.sub(_entryPrice)) / 1e8;\\n        } else {\\n            if (newPosition != 0) {\\n                newEntryPrice = _tradePrice;\\n            }\\n\\n            profitValue = _position.mul(_tradePrice.sub(_entryPrice)) / 1e8;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x76b69923c0d21ff5a04335743b0b4f64ff36a90df6154f030914231abf47c858\",\"license\":\"agpl-3.0\"},\"contracts/lib/Math.sol\":{\"content\":\"//SPDX-License-Identifier: agpl-3.0\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * Error codes\\n * M0: y is too small\\n * M1: y is too large\\n * M2: possible overflow\\n * M3: input should be positive number\\n * M4: cannot handle exponents greater than 100\\n */\\nlibrary Math {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    /// @dev Min exp\\n    int256 private constant MIN_EXP = -63 * 1e8;\\n    /// @dev Max exp\\n    uint256 private constant MAX_EXP = 100 * 1e8;\\n    /// @dev ln(2) scaled by 1e8\\n    uint256 private constant LN_2_E8 = 69314718;\\n\\n    /**\\n     * @notice Return the addition of unsigned integer and sigined integer.\\n     * when y is negative reverting on negative result and when y is positive reverting on overflow.\\n     */\\n    function addDelta(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        if (y < 0) {\\n            require((z = x - uint256(-y)) < x, \\\"M0\\\");\\n        } else {\\n            require((z = x + uint256(y)) >= x, \\\"M1\\\");\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? b : a;\\n    }\\n\\n    /**\\n     * @notice Returns scaled number.\\n     * Reverts if the scaler is greater than 50.\\n     */\\n    function scale(\\n        uint256 _a,\\n        uint256 _from,\\n        uint256 _to\\n    ) internal pure returns (uint256) {\\n        if (_from > _to) {\\n            require(_from - _to < 70, \\\"M2\\\");\\n            // (_from - _to) is safe because _from > _to.\\n            // 10**(_from - _to) is safe because it's less than 10**70.\\n            return _a.div(10**(_from - _to));\\n        } else if (_from < _to) {\\n            require(_to - _from < 70, \\\"M2\\\");\\n            // (_to - _from) is safe because _to > _from.\\n            // 10**(_to - _from) is safe because it's less than 10**70.\\n            return _a.mul(10**(_to - _from));\\n        } else {\\n            return _a;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48b5c1ab1cf783b928b58b837dfbc83db49e59fb6e375c6e2ffd64982f437a26\",\"license\":\"agpl-3.0\"},\"contracts/lib/NettingLib.sol\":{\"content\":\"//SPDX-License-Identifier: agpl-3.0\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"./Math.sol\\\";\\n\\n/**\\n * @title NettingLib\\n * Error codes\\n * N0: Unknown product id\\n * N1: Total delta must be greater than 0\\n * N2: No enough USDC\\n */\\nlibrary NettingLib {\\n    using SafeCast for int256;\\n    using SafeCast for uint128;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SafeMath for uint128;\\n    using SignedSafeMath for int256;\\n    using SignedSafeMath for int128;\\n\\n    struct AddMarginParams {\\n        int256 delta0;\\n        int256 delta1;\\n        int256 gamma1;\\n        int256 spotPrice;\\n        int256 poolMarginRiskParam;\\n    }\\n\\n    struct CompleteParams {\\n        uint256 amountUsdc;\\n        uint256 amountUnderlying;\\n        int256[2] amountsRequiredUnderlying;\\n        bool isLong;\\n    }\\n\\n    struct Info {\\n        uint128 amountAaveCollateral;\\n        uint128[2] amountsUsdc;\\n        int128[2] amountsUnderlying;\\n    }\\n\\n    /**\\n     * @notice Adds required margin for delta hedging\\n     */\\n    function addMargin(\\n        Info storage _info,\\n        uint256 _productId,\\n        AddMarginParams memory _params\\n    ) internal returns (int256 requiredMargin, int256 hedgePositionValue) {\\n        int256 totalRequiredMargin = getRequiredMargin(_productId, _params);\\n\\n        hedgePositionValue = getHedgePositionValue(_info, _params.spotPrice, _productId);\\n\\n        requiredMargin = totalRequiredMargin.sub(hedgePositionValue);\\n\\n        if (_info.amountsUsdc[_productId].toInt256().add(requiredMargin) < 0) {\\n            requiredMargin = -_info.amountsUsdc[_productId].toInt256();\\n        }\\n\\n        _info.amountsUsdc[_productId] = Math.addDelta(_info.amountsUsdc[_productId], requiredMargin).toUint128();\\n    }\\n\\n    function getRequiredTokenAmountsForHedge(\\n        int128[2] memory _amountsUnderlying,\\n        int256[2] memory _deltas,\\n        int256 _spotPrice\\n    ) internal pure returns (CompleteParams memory completeParams) {\\n        completeParams.amountsRequiredUnderlying[0] = -_amountsUnderlying[0] - _deltas[0];\\n        completeParams.amountsRequiredUnderlying[1] = -_amountsUnderlying[1] - _deltas[1];\\n\\n        int256 totalUnderlyingPosition = getTotalUnderlyingPosition(_amountsUnderlying);\\n\\n        // 1. Calculate required amount of underlying token\\n        int256 requiredUnderlyingAmount;\\n        {\\n            // required amount is -(net delta)\\n            requiredUnderlyingAmount = -_deltas[0].add(_deltas[1]).add(totalUnderlyingPosition);\\n\\n            if (_deltas[0].add(_deltas[1]) > 0) {\\n                // if pool delta is positive\\n                requiredUnderlyingAmount = -totalUnderlyingPosition;\\n\\n                completeParams.amountsRequiredUnderlying[0] = -_amountsUnderlying[0] + _deltas[1];\\n            }\\n\\n            completeParams.isLong = requiredUnderlyingAmount > 0;\\n        }\\n\\n        // 2. Calculate USDC and ETH amounts.\\n        completeParams.amountUnderlying = Math.abs(requiredUnderlyingAmount);\\n        completeParams.amountUsdc = (Math.abs(requiredUnderlyingAmount).mul(uint256(_spotPrice))) / 1e8;\\n\\n        return completeParams;\\n    }\\n\\n    /**\\n     * @notice Completes delta hedging procedure\\n     * Calculate holding amount of Underlying and USDC after a hedge.\\n     */\\n    function complete(Info storage _info, CompleteParams memory _params) internal {\\n        uint256 totalUnderlying = Math.abs(_params.amountsRequiredUnderlying[0]).add(\\n            Math.abs(_params.amountsRequiredUnderlying[1])\\n        );\\n\\n        require(totalUnderlying > 0, \\\"N1\\\");\\n\\n        for (uint256 i = 0; i < 2; i++) {\\n            _info.amountsUnderlying[i] = _info\\n                .amountsUnderlying[i]\\n                .add(_params.amountsRequiredUnderlying[i])\\n                .toInt128();\\n\\n            {\\n                uint256 deltaUsdcAmount = (_params.amountUsdc.mul(Math.abs(_params.amountsRequiredUnderlying[i]))).div(\\n                    totalUnderlying\\n                );\\n\\n                if (_params.isLong) {\\n                    require(_info.amountsUsdc[i] >= deltaUsdcAmount, \\\"N2\\\");\\n                    _info.amountsUsdc[i] = _info.amountsUsdc[i].sub(deltaUsdcAmount).toUint128();\\n                } else {\\n                    _info.amountsUsdc[i] = _info.amountsUsdc[i].add(deltaUsdcAmount).toUint128();\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets required margin\\n     * @param _productId Id of product to get required margin\\n     * @param _params parameters to calculate required margin\\n     * @return RequiredMargin scaled by 1e8\\n     */\\n    function getRequiredMargin(uint256 _productId, AddMarginParams memory _params) internal pure returns (int256) {\\n        int256 weightedDelta = calculateWeightedDelta(_productId, _params.delta0, _params.delta1);\\n\\n        if (_productId == 0) {\\n            return getRequiredMarginOfFuture(_params, weightedDelta);\\n        } else if (_productId == 1) {\\n            return getRequiredMarginOfSqueeth(_params, weightedDelta);\\n        } else {\\n            revert(\\\"N0\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets required margin for future\\n     * RequiredMargin_{future} = (1+\\u03b1)*S*|WeightedDelta|\\n     * @return RequiredMargin scaled by 1e8\\n     */\\n    function getRequiredMarginOfFuture(AddMarginParams memory _params, int256 _weightedDelta)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        int256 requiredMargin = (_params.spotPrice.mul(Math.abs(_weightedDelta).toInt256())) / 1e8;\\n        return ((1e4 + _params.poolMarginRiskParam).mul(requiredMargin)) / 1e4;\\n    }\\n\\n    /**\\n     * @notice Gets required margin for squeeth\\n     * RequiredMargin_{squeeth}\\n     * = max((1-\\u03b1) * S * |WeightDelta_{sqeeth}-\\u03b1 * S * gamma|, (1+\\u03b1) * S * |WeightDelta_{sqeeth}+\\u03b1 * S * gamma|)\\n     * @return RequiredMargin scaled by 1e8\\n     */\\n    function getRequiredMarginOfSqueeth(AddMarginParams memory _params, int256 _weightedDelta)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        int256 deltaFromGamma = (_params.poolMarginRiskParam.mul(_params.spotPrice).mul(_params.gamma1)) / 1e12;\\n\\n        return\\n            Math.max(\\n                (\\n                    (1e4 - _params.poolMarginRiskParam).mul(_params.spotPrice).mul(\\n                        Math.abs(_weightedDelta.sub(deltaFromGamma)).toInt256()\\n                    )\\n                ) / 1e12,\\n                (\\n                    (1e4 + _params.poolMarginRiskParam).mul(_params.spotPrice).mul(\\n                        Math.abs(_weightedDelta.add(deltaFromGamma)).toInt256()\\n                    )\\n                ) / 1e12\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets notional value of hedge positions\\n     * HedgePositionValue_i = AmountsUsdc_i+AmountsUnderlying_i*S\\n     * @return HedgePositionValue scaled by 1e8\\n     */\\n    function getHedgePositionValue(\\n        Info memory _info,\\n        int256 _spot,\\n        uint256 _productId\\n    ) internal pure returns (int256) {\\n        int256 hedgeNotional = _spot.mul(_info.amountsUnderlying[_productId]) / 1e8;\\n\\n        return _info.amountsUsdc[_productId].toInt256().add(hedgeNotional);\\n    }\\n\\n    /**\\n     * @notice Gets total underlying position\\n     * TotalUnderlyingPosition = \\u03a3AmountsUnderlying_i\\n     */\\n    function getTotalUnderlyingPosition(int128[2] memory _amountsUnderlying)\\n        internal\\n        pure\\n        returns (int256 underlyingPosition)\\n    {\\n        for (uint256 i = 0; i < 2; i++) {\\n            underlyingPosition = underlyingPosition.add(_amountsUnderlying[i]);\\n        }\\n\\n        return underlyingPosition;\\n    }\\n\\n    /**\\n     * @notice Calculates weighted delta\\n     * WeightedDelta = delta_i * (\\u03a3delta_i) / (\\u03a3|delta_i|)\\n     * @return weighted delta scaled by 1e8\\n     */\\n    function calculateWeightedDelta(\\n        uint256 _productId,\\n        int256 _delta0,\\n        int256 _delta1\\n    ) internal pure returns (int256) {\\n        int256 netDelta = _delta0.add(_delta1);\\n        int256 totalDelta = (Math.abs(_delta0).add(Math.abs(_delta1))).toInt256();\\n\\n        require(totalDelta >= 0, \\\"N1\\\");\\n\\n        if (totalDelta == 0) {\\n            return 0;\\n        }\\n\\n        if (_productId == 0) {\\n            return (Math.abs(_delta0).toInt256().mul(netDelta)).div(totalDelta);\\n        } else if (_productId == 1) {\\n            return (Math.abs(_delta1).toInt256().mul(netDelta)).div(totalDelta);\\n        } else {\\n            revert(\\\"N0\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x46f6b430287b0cab11606278f5d69a3bd72d536e857a8e9601fa41a1f5ab48e9\",\"license\":\"agpl-3.0\"},\"contracts/lib/TraderVaultLib.sol\":{\"content\":\"//SPDX-License-Identifier: agpl-3.0\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"../interfaces/IPerpetualMarketCore.sol\\\";\\nimport \\\"./Math.sol\\\";\\nimport \\\"./EntryPriceMath.sol\\\";\\n\\n/**\\n * @title TraderVaultLib\\n * @notice TraderVaultLib has functions to calculate position value and minimum collateral for implementing cross margin wallet.\\n *\\n * Data Structure\\n *  Vault\\n *  - PositionUSDC\\n *  - SubVault0(PositionPerpetuals, EntryPrices, entryFundingFee)\\n *  - SubVault1(PositionPerpetuals, EntryPrices, entryFundingFee)\\n *  - ...\\n *\\n *  PositionPerpetuals = [PositionSqueeth, PositionFuture]\\n *  EntryPrices = [EntryPriceSqueeth, EntryPriceFuture]\\n *  entryFundingFee = [entryFundingFeeqeeth, FundingFeeEntryValueFuture]\\n *\\n *\\n * Error codes\\n *  T0: PositionValue must be greater than MinCollateral\\n *  T1: PositionValue must be less than MinCollateral\\n *  T2: Vault is insolvent\\n *  T3: subVaultIndex is too large\\n *  T4: position must not be 0\\n *  T5: usdc to add must be positive\\n */\\nlibrary TraderVaultLib {\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for uint128;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using SignedSafeMath for int128;\\n\\n    uint256 private constant MAX_PRODUCT_ID = 2;\\n\\n    /// @dev minimum margin is 200 USDC\\n    uint256 private constant MIN_MARGIN = 200 * 1e8;\\n\\n    /// @dev risk parameter for MinCollateral calculation is 5.0%\\n    uint256 private constant RISK_PARAM_FOR_VAULT = 500;\\n\\n    struct SubVault {\\n        int128[2] positionPerpetuals;\\n        uint128[2] entryPrices;\\n        int256[2] entryFundingFee;\\n    }\\n\\n    struct TraderVault {\\n        int128 positionUsdc;\\n        SubVault[] subVaults;\\n        bool isInsolvent;\\n    }\\n\\n    /**\\n     * @notice Gets amount of min collateral to add Squees/Future\\n     * @param _traderVault trader vault object\\n     * @param _tradeAmounts amount to trade\\n     * @param _tradePriceInfo trade price info\\n     * @return minCollateral and positionValue\\n     */\\n    function getMinCollateralToAddPosition(\\n        TraderVault memory _traderVault,\\n        int128[2] memory _tradeAmounts,\\n        IPerpetualMarketCore.TradePriceInfo memory _tradePriceInfo\\n    ) internal pure returns (int256 minCollateral) {\\n        int128[2] memory positionPerpetuals = getPositionPerpetuals(_traderVault);\\n\\n        for (uint256 i = 0; i < MAX_PRODUCT_ID; i++) {\\n            positionPerpetuals[i] = positionPerpetuals[i].add(_tradeAmounts[i]).toInt128();\\n        }\\n\\n        minCollateral = calculateMinCollateral(positionPerpetuals, _tradePriceInfo);\\n    }\\n\\n    /**\\n     * @notice Updates USDC position\\n     * @param _traderVault trader vault object\\n     * @param _usdcPositionToAdd amount to add. if positive then increase amount, if negative then decrease amount.\\n     * @param _tradePriceInfo trade price info\\n     * @return finalUsdcPosition positive means amount of deposited margin\\n     * and negative means amount of withdrawn margin.\\n     */\\n    function updateUsdcPosition(\\n        TraderVault storage _traderVault,\\n        int256 _usdcPositionToAdd,\\n        IPerpetualMarketCore.TradePriceInfo memory _tradePriceInfo\\n    ) external returns (int256 finalUsdcPosition) {\\n        finalUsdcPosition = _usdcPositionToAdd;\\n        require(!_traderVault.isInsolvent, \\\"T2\\\");\\n\\n        int256 positionValue = getPositionValue(_traderVault, _tradePriceInfo);\\n        int256 minCollateral = getMinCollateral(_traderVault, _tradePriceInfo);\\n        int256 maxWithdrawable = positionValue - minCollateral;\\n\\n        // If trader wants to withdraw all USDC, set maxWithdrawable.\\n        if (_usdcPositionToAdd < -maxWithdrawable && maxWithdrawable > 0 && _usdcPositionToAdd < 0) {\\n            finalUsdcPosition = -maxWithdrawable;\\n        }\\n\\n        _traderVault.positionUsdc = _traderVault.positionUsdc.add(finalUsdcPosition).toInt128();\\n\\n        require(!checkVaultIsLiquidatable(_traderVault, _tradePriceInfo), \\\"T0\\\");\\n    }\\n\\n    /**\\n     * @notice Add USDC position\\n     * @param _traderVault trader vault object\\n     * @param _usdcPositionToAdd amount to add. value is always positive.\\n     */\\n    function addUsdcPosition(TraderVault storage _traderVault, int256 _usdcPositionToAdd) external {\\n        require(!_traderVault.isInsolvent, \\\"T2\\\");\\n        require(_usdcPositionToAdd > 0, \\\"T5\\\");\\n\\n        _traderVault.positionUsdc = _traderVault.positionUsdc.add(_usdcPositionToAdd).toInt128();\\n    }\\n\\n    /**\\n     * @notice Gets total position of perpetuals in the vault\\n     * @param _traderVault trader vault object\\n     * @return positionPerpetuals are total amount of perpetual scaled by 1e8\\n     */\\n    function getPositionPerpetuals(TraderVault memory _traderVault)\\n        internal\\n        pure\\n        returns (int128[2] memory positionPerpetuals)\\n    {\\n        for (uint256 i = 0; i < MAX_PRODUCT_ID; i++) {\\n            positionPerpetuals[i] = getPositionPerpetual(_traderVault, i);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets position of a perpetual in the vault\\n     * @param _traderVault trader vault object\\n     * @param _productId product id\\n     * @return positionPerpetual is amount of perpetual scaled by 1e8\\n     */\\n    function getPositionPerpetual(TraderVault memory _traderVault, uint256 _productId)\\n        internal\\n        pure\\n        returns (int128 positionPerpetual)\\n    {\\n        for (uint256 i = 0; i < _traderVault.subVaults.length; i++) {\\n            positionPerpetual = positionPerpetual\\n                .add(_traderVault.subVaults[i].positionPerpetuals[_productId])\\n                .toInt128();\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates positions in the vault\\n     * @param _traderVault trader vault object\\n     * @param _subVaultIndex index of sub-vault\\n     * @param _productId product id\\n     * @param _positionPerpetual amount of position to increase or decrease\\n     * @param _tradePrice trade price\\n     * @param _fundingFeePerPosition entry funding fee paid per position\\n     */\\n    function updateVault(\\n        TraderVault storage _traderVault,\\n        uint256 _subVaultIndex,\\n        uint256 _productId,\\n        int128 _positionPerpetual,\\n        uint256 _tradePrice,\\n        int256 _fundingFeePerPosition\\n    ) external returns (int256 deltaUsdcPosition) {\\n        require(!_traderVault.isInsolvent, \\\"T2\\\");\\n        require(_positionPerpetual != 0, \\\"T4\\\");\\n\\n        if (_traderVault.subVaults.length == _subVaultIndex) {\\n            int128[2] memory positionPerpetuals;\\n            uint128[2] memory entryPrices;\\n            int256[2] memory entryFundingFee;\\n\\n            _traderVault.subVaults.push(SubVault(positionPerpetuals, entryPrices, entryFundingFee));\\n        } else {\\n            require(_traderVault.subVaults.length > _subVaultIndex, \\\"T3\\\");\\n        }\\n\\n        SubVault storage subVault = _traderVault.subVaults[_subVaultIndex];\\n\\n        {\\n            (int256 newEntryPrice, int256 profitValue) = EntryPriceMath.updateEntryPrice(\\n                int256(subVault.entryPrices[_productId]),\\n                subVault.positionPerpetuals[_productId],\\n                int256(_tradePrice),\\n                _positionPerpetual\\n            );\\n\\n            subVault.entryPrices[_productId] = newEntryPrice.toUint256().toUint128();\\n            deltaUsdcPosition = deltaUsdcPosition.add(profitValue);\\n        }\\n\\n        {\\n            (int256 newEntryFundingFee, int256 profitValue) = EntryPriceMath.updateEntryPrice(\\n                int256(subVault.entryFundingFee[_productId]),\\n                subVault.positionPerpetuals[_productId],\\n                _fundingFeePerPosition,\\n                _positionPerpetual\\n            );\\n\\n            subVault.entryFundingFee[_productId] = newEntryFundingFee;\\n            deltaUsdcPosition = deltaUsdcPosition.sub(profitValue.div(1e8));\\n        }\\n\\n        _traderVault.positionUsdc = _traderVault.positionUsdc.add(deltaUsdcPosition).toInt128();\\n\\n        subVault.positionPerpetuals[_productId] = subVault\\n            .positionPerpetuals[_productId]\\n            .add(_positionPerpetual)\\n            .toInt128();\\n    }\\n\\n    /**\\n     * @notice Checks the vault is liquidatable and return result\\n     * if PositionValue is less than MinCollateral return true\\n     * otherwise return false\\n     * @param _traderVault trader vault object\\n     * @return if true the vault is liquidatable, if false the vault is not liquidatable\\n     */\\n    function checkVaultIsLiquidatable(\\n        TraderVault memory _traderVault,\\n        IPerpetualMarketCore.TradePriceInfo memory _tradePriceInfo\\n    ) internal pure returns (bool) {\\n        int256 positionValue = getPositionValue(_traderVault, _tradePriceInfo);\\n\\n        return positionValue < getMinCollateral(_traderVault, _tradePriceInfo);\\n    }\\n\\n    /**\\n     * @notice Set insolvency flag if needed\\n     * If PositionValue is negative, set insolvency flag.\\n     * @param _traderVault trader vault object\\n     */\\n    function setInsolvencyFlagIfNeeded(TraderVault storage _traderVault) external {\\n        // Confirm that there are no positions\\n        for (uint256 i = 0; i < _traderVault.subVaults.length; i++) {\\n            for (uint256 j = 0; j < MAX_PRODUCT_ID; j++) {\\n                require(_traderVault.subVaults[i].positionPerpetuals[j] == 0);\\n            }\\n        }\\n\\n        // If there are no positions, PositionUSDC is equal to PositionValue.\\n        if (_traderVault.positionUsdc < 0) {\\n            _traderVault.isInsolvent = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice Decreases liquidation reward from usdc position\\n     * @param _traderVault trader vault object\\n     * @param _minCollateral min collateral\\n     * @param _liquidationFee liquidation fee rate\\n     */\\n    function decreaseLiquidationReward(\\n        TraderVault storage _traderVault,\\n        int256 _minCollateral,\\n        int256 _liquidationFee\\n    ) external returns (uint256) {\\n        if (_traderVault.positionUsdc <= 0) {\\n            return 0;\\n        }\\n\\n        int256 reward = _minCollateral.mul(_liquidationFee).div(1e4);\\n\\n        reward = Math.min(reward, _traderVault.positionUsdc);\\n\\n        // reduce margin\\n        // sub is safe because we know reward is less than positionUsdc\\n        _traderVault.positionUsdc -= reward.toInt128();\\n\\n        return reward.toUint256();\\n    }\\n\\n    /**\\n     * @notice Gets min collateral of the vault\\n     * @param _traderVault trader vault object\\n     * @param _tradePriceInfo trade price info\\n     * @return MinCollateral scaled by 1e8\\n     */\\n    function getMinCollateral(\\n        TraderVault memory _traderVault,\\n        IPerpetualMarketCore.TradePriceInfo memory _tradePriceInfo\\n    ) internal pure returns (int256) {\\n        int128[2] memory assetAmounts = getPositionPerpetuals(_traderVault);\\n\\n        return calculateMinCollateral(assetAmounts, _tradePriceInfo);\\n    }\\n\\n    /**\\n     * @notice Calculates min collateral\\n     * MinCollateral = alpha*S*(|2*S*(1+fundingSqueeth)*PositionSqueeth + (1+fundingFuture)*PositionFuture| + 2*alpha*S*(1+fundingSqueeth)*|PositionSqueeth|)\\n     * where alpha is 0.05\\n     * @param positionPerpetuals amount of perpetual positions\\n     * @param _tradePriceInfo trade price info\\n     * @return MinCollateral scaled by 1e8\\n     */\\n    function calculateMinCollateral(\\n        int128[2] memory positionPerpetuals,\\n        IPerpetualMarketCore.TradePriceInfo memory _tradePriceInfo\\n    ) internal pure returns (int256) {\\n        // priceWithFunding = S*(1+fundingSqueeth)\\n        int256 priceWithFunding = int256(_tradePriceInfo.spotPrice).mul(_tradePriceInfo.fundingRates[1].add(1e16)).div(\\n            1e8\\n        );\\n\\n        uint256 maxDelta = Math.abs(\\n            (priceWithFunding.mul(positionPerpetuals[1]).mul(2).div(1e20)).add(\\n                positionPerpetuals[0].mul(_tradePriceInfo.fundingRates[0].add(1e16)).div(1e16)\\n            )\\n        );\\n\\n        maxDelta = maxDelta.add(\\n            Math.abs(int256(RISK_PARAM_FOR_VAULT).mul(priceWithFunding).mul(2).mul(positionPerpetuals[1]).div(1e24))\\n        );\\n\\n        uint256 minCollateral = (RISK_PARAM_FOR_VAULT.mul(_tradePriceInfo.spotPrice).mul(maxDelta)) / 1e12;\\n\\n        if ((positionPerpetuals[0] != 0 || positionPerpetuals[1] != 0) && minCollateral < MIN_MARGIN) {\\n            minCollateral = MIN_MARGIN;\\n        }\\n\\n        return minCollateral.toInt256();\\n    }\\n\\n    /**\\n     * @notice Gets position value in the vault\\n     * PositionValue = USDC + \\u03a3(ValueOfSubVault_i)\\n     * @param _traderVault trader vault object\\n     * @param _tradePriceInfo trade price info\\n     * @return PositionValue scaled by 1e8\\n     */\\n    function getPositionValue(\\n        TraderVault memory _traderVault,\\n        IPerpetualMarketCore.TradePriceInfo memory _tradePriceInfo\\n    ) internal pure returns (int256) {\\n        int256 value = _traderVault.positionUsdc;\\n\\n        for (uint256 i = 0; i < _traderVault.subVaults.length; i++) {\\n            value = value.add(getSubVaultPositionValue(_traderVault.subVaults[i], _tradePriceInfo));\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @notice Gets position value in the sub-vault\\n     * ValueOfSubVault = TotalPerpetualValueOfSubVault + TotalFundingFeePaidOfSubVault\\n     * @param _subVault sub-vault object\\n     * @param _tradePriceInfo trade price info\\n     * @return ValueOfSubVault scaled by 1e8\\n     */\\n    function getSubVaultPositionValue(\\n        SubVault memory _subVault,\\n        IPerpetualMarketCore.TradePriceInfo memory _tradePriceInfo\\n    ) internal pure returns (int256) {\\n        return\\n            getTotalPerpetualValueOfSubVault(_subVault, _tradePriceInfo).add(\\n                getTotalFundingFeePaidOfSubVault(_subVault, _tradePriceInfo.amountsFundingPaidPerPosition)\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets total perpetual value in the sub-vault\\n     * TotalPerpetualValueOfSubVault = \\u03a3(PerpetualValueOfSubVault_i)\\n     * @param _subVault sub-vault object\\n     * @param _tradePriceInfo trade price info\\n     * @return TotalPerpetualValueOfSubVault scaled by 1e8\\n     */\\n    function getTotalPerpetualValueOfSubVault(\\n        SubVault memory _subVault,\\n        IPerpetualMarketCore.TradePriceInfo memory _tradePriceInfo\\n    ) internal pure returns (int256) {\\n        int256 pnl;\\n\\n        for (uint256 i = 0; i < MAX_PRODUCT_ID; i++) {\\n            pnl = pnl.add(getPerpetualValueOfSubVault(_subVault, i, _tradePriceInfo));\\n        }\\n\\n        return pnl;\\n    }\\n\\n    /**\\n     * @notice Gets perpetual value in the sub-vault\\n     * PerpetualValueOfSubVault_i = (TradePrice_i - EntryPrice_i)*Position_i\\n     * @param _subVault sub-vault object\\n     * @param _productId product id\\n     * @param _tradePriceInfo trade price info\\n     * @return PerpetualValueOfSubVault_i scaled by 1e8\\n     */\\n    function getPerpetualValueOfSubVault(\\n        SubVault memory _subVault,\\n        uint256 _productId,\\n        IPerpetualMarketCore.TradePriceInfo memory _tradePriceInfo\\n    ) internal pure returns (int256) {\\n        int256 pnl = _tradePriceInfo.tradePrices[_productId].sub(_subVault.entryPrices[_productId].toInt256()).mul(\\n            _subVault.positionPerpetuals[_productId]\\n        );\\n\\n        return pnl / 1e8;\\n    }\\n\\n    /**\\n     * @notice Gets total funding fee in the sub-vault\\n     * TotalFundingFeePaidOfSubVault = \\u03a3(FundingFeePaidOfSubVault_i)\\n     * @param _subVault sub-vault object\\n     * @param _amountsFundingPaidPerPosition the cumulative funding fee paid by long per position\\n     * @return TotalFundingFeePaidOfSubVault scaled by 1e8\\n     */\\n    function getTotalFundingFeePaidOfSubVault(\\n        SubVault memory _subVault,\\n        int256[2] memory _amountsFundingPaidPerPosition\\n    ) internal pure returns (int256) {\\n        int256 fundingFee;\\n\\n        for (uint256 i = 0; i < MAX_PRODUCT_ID; i++) {\\n            fundingFee = fundingFee.add(getFundingFeePaidOfSubVault(_subVault, i, _amountsFundingPaidPerPosition));\\n        }\\n\\n        return fundingFee;\\n    }\\n\\n    /**\\n     * @notice Gets funding fee in the sub-vault\\n     * FundingFeePaidOfSubVault_i = Position_i*(EntryFundingFee_i - FundingFeeGlobal_i)\\n     * @param _subVault sub-vault object\\n     * @param _productId product id\\n     * @param _amountsFundingPaidPerPosition cumulative funding fee paid by long per position.\\n     * @return FundingFeePaidOfSubVault_i scaled by 1e8\\n     */\\n    function getFundingFeePaidOfSubVault(\\n        SubVault memory _subVault,\\n        uint256 _productId,\\n        int256[2] memory _amountsFundingPaidPerPosition\\n    ) internal pure returns (int256) {\\n        int256 fundingFee = _subVault.entryFundingFee[_productId].sub(_amountsFundingPaidPerPosition[_productId]).mul(\\n            _subVault.positionPerpetuals[_productId]\\n        );\\n\\n        return fundingFee.div(1e16);\\n    }\\n}\\n\",\"keccak256\":\"0x8b30f11c33b3e403bebc07233f1011b9afb90fffbd9f67e2cbb322c5d6a0ffd0\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806399be545a116100ad578063d392357311610071578063d392357314610268578063dae0f6d91461027b578063eea484d81461028e578063f2fde38b146102ae578063fdf262b7146102c15761012c565b806399be545a146101fc578063a0642dfd1461020f578063b4f0332f14610222578063b6b55f2514610242578063c9d48a96146102555761012c565b8063715018a6116100f4578063715018a6146101ad5780637158da7c146101b557806373f3489e146101bd578063854ad1b7146101dd5780638da5cb5b146101f45761012c565b806302387a7b146101315780631b4707101461014657806324fe71ea1461016557806349ebb77d1461017a5780636124fa8e1461019a575b600080fd5b61014461013f3660046140b7565b6102c9565b005b61014e610454565b60405161015c92919061454f565b60405180910390f35b61016d610845565b60405161015c9190614342565b61018d610188366004613e05565b610854565b60405161015c91906145fe565b6101446101a836600461418c565b610c4a565b610144610e11565b61016d610ecf565b6101d06101cb366004613e05565b610ef3565b60405161015c91906143fe565b6101e5610f98565b60405161015c939291906143e6565b61016d6110b4565b61014461020a366004613e05565b6110c3565b61014461021d36600461418c565b611a9a565b610235610230366004614161565b611bcd565b60405161015c91906144e3565b610144610250366004613e05565b611d37565b610144610263366004613edf565b611ecf565b610144610276366004613db3565b6126a7565b6101d06102893660046140d3565b612784565b6102a161029c366004613e05565b6129c9565b60405161015c919061453c565b6101446102bc366004613db3565b612b5d565b61016d612c71565b6000816001600160801b0316116102df57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637d8c26596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561033a57600080fd5b505af115801561034e573d6000803e3d6000fd5b505060405163f3fef3a360e01b8152600092506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915063f3fef3a3906103a6903390606487029060040161437c565b602060405180830381600087803b1580156103c057600080fd5b505af11580156103d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f89190613e1d565b905061040d33836001600160801b0316612c95565b336001600160a01b03167f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6828460405161044892919061467b565b60405180910390a25050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637d8c26596040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156104b257600080fd5b505af11580156104c6573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166387c3a09a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561052557600080fd5b505af1158015610539573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637d7c2a1c6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561059857600080fd5b505af11580156105ac573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663854ad1b76040518163ffffffff1660e01b815260040160a06040518083038186803b15801561060b57600080fd5b505afa15801561061f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106439190613e74565b604051636de98dd160e11b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dbd31ba2906106929084906004016144a8565b600060405180830381600087803b1580156106ac57600080fd5b505af11580156106c0573d6000803e3d6000fd5b50508251606492509050049250610770816020015160087f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561073057600080fd5b505afa158015610744573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076891906141da565b60ff16612ccd565b91508060600151156107c0576107b16001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085612d86565b6107bb3384612c95565b6107ff565b6107f56001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612d86565b6107ff3383612de6565b7f97ecad77f31756d3d2f581bf1acec77dbdb445bf9b69afff2c62d02d4d2547de33826060015185856040516108389493929190614356565b60405180910390a1509091565b6001546001600160a01b031681565b61085c613c00565b600082815260036020908152604080832081516060810183528154600f90810b810b900b81526001820180548451818702810187019095528085529194929385840193909290879084015b828210156109c9576000848152602090206040805160a0810190915290600484020181606081018260028282826020028201916000905b82829054906101000a9004600f0b600f0b81526020019060100190602082600f010492830192600103820291508084116108de575050509284525050604080518082019182905260209093019291506001840190600290826000855b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f0104928301926001038202915080841161093a5750505092845250506040805180820191829052602090930192915060028481019182845b81548152602001906001019080831161099e57505050505081525050815260200190600101906108a7565b505050908252506002919091015460ff161515602090910152905060006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166382f3955d610a1e84612e1a565b6040518263ffffffff1660e01b8152600401610a3a91906143d8565b60e06040518083038186803b158015610a5257600080fd5b505afa158015610a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8a9190614048565b9050600082602001515167ffffffffffffffff81118015610aaa57600080fd5b50604051908082528060200260200182016040528015610ae457816020015b610ad1613c34565b815260200190600190039081610ac95790505b509050600083602001515167ffffffffffffffff81118015610b0557600080fd5b50604051908082528060200260200182016040528015610b3f57816020015b610b2c613c34565b815260200190600190039081610b245790505b50905060005b846020015151811015610c035760005b6002811015610bfa57610b8086602001518381518110610b7157fe5b60200260200101518287612e61565b848381518110610b8c57fe5b60200260200101518260028110610b9f57fe5b602002018181525050610bce86602001518381518110610bbb57fe5b6020026020010151828760600151612ed9565b838381518110610bda57fe5b60200260200101518260028110610bed57fe5b6020020152600101610b55565b50600101610b45565b506040805160a0810190915280610c1a8686612f37565b8152602001610c298686612f8b565b8152602001838152602001828152602001858152509450505050505b919050565b600082118015610ce05750600260009054906101000a90046001600160a01b03166001600160a01b03166361b8ce8c6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ca557600080fd5b505af1158015610cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdd9190613e1d565b82105b610d055760405162461bcd60e51b8152600401610cfc9061448b565b60405180910390fd5b600082815260036020526040902073__$b139f62619843504e83620ab3c72958bdd$__906369e2bed090610d3a846064612fab565b6040518363ffffffff1660e01b8152600401610d5792919061454f565b60006040518083038186803b158015610d6f57600080fd5b505af4158015610d83573d6000803e3d6000fd5b505050506000610d9282613054565b9050610dc96001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612d86565b336001600160a01b03167ffc3608744ea5805574f007540fe37736bbebd81365de55991f3b17a16295521d8483604051610e0492919061454f565b60405180910390a2505050565b610e196130af565b6001600160a01b0316610e2a6110b4565b6001600160a01b031614610e85576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516339f9a44f60e11b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906373f3489e90610f429085906004016143fe565b60206040518083038186803b158015610f5a57600080fd5b505afa158015610f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f929190613e1d565b92915050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663854ad1b76040518163ffffffff1660e01b815260040160a06040518083038186803b158015610ff757600080fd5b505afa15801561100b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102f9190613e74565b90508060600151606482600001518161104457fe5b046110a8836020015160087f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561073057600080fd5b93509350935050909192565b6000546001600160a01b031690565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637d8c26596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561111e57600080fd5b505af1158015611132573d6000803e3d6000fd5b505050600082815260036020908152604080832081516060810183528154600f90810b810b900b81526001820180548451818702810187019095528085529296506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016946382f3955d946112f6948993858401939091908a9084015b828210156112d8576000848152602090206040805160a0810190915290600484020181606081018260028282826020028201916000905b82829054906101000a9004600f0b600f0b81526020019060100190602082600f010492830192600103820291508084116111ed575050509284525050604080518082019182905260209093019291506001840190600290826000855b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f010492830192600103820291508084116112495750505092845250506040805180820191829052602090930192915060028481019182845b8154815260200190600101908083116112ad57505050505081525050815260200190600101906111b6565b505050908252506002919091015460ff161515602090910152612e1a565b6040518263ffffffff1660e01b815260040161131291906143d8565b60e06040518083038186803b15801561132a57600080fd5b505afa15801561133e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113629190614048565b604080516060810182528454600f90810b810b900b815260018501805483516020828102820181019095528181529495506114e8948694889381860193909160009084015b828210156114c9576000848152602090206040805160a0810190915290600484020181606081018260028282826020028201916000905b82829054906101000a9004600f0b600f0b81526020019060100190602082600f010492830192600103820291508084116113de575050509284525050604080518082019182905260209093019291506001840190600290826000855b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f0104928301926001038202915080841161143a5750505092845250506040805180820191829052602090930192915060028481019182845b81548152602001906001019080831161149e57505050505081525050815260200190600101906113a7565b505050908252506002919091015460ff161515602090910152906130b3565b6115045760405162461bcd60e51b8152600401610cfc90614441565b600061169982846040518060600160405290816000820160009054906101000a9004600f0b600f0b600f0b815260200160018201805480602002602001604051908101604052809291908181526020016000905b8282101561167a576000848152602090206040805160a0810190915290600484020181606081018260028282826020028201916000905b82829054906101000a9004600f0b600f0b81526020019060100190602082600f0104928301926001038202915080841161158f575050509284525050604080518082019182905260209093019291506001840190600290826000855b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f010492830192600103820291508084116115eb5750505092845250506040805180820191829052602090930192915060028481019182845b81548152602001906001019080831161164f5750505050508152505081526020019060010190611558565b505050908252506002919091015460ff16151560209091015290612f8b565b90506000805b600185015481101561173f5760005b60028110156117365760008660010183815481106116c857fe5b906000526020600020906004020160000182600281106116e457fe5b600291828204019190066010029054906101000a9004600f0b905061172b61172488848b87866000036000604051806020016040528060008152506130d4565b85906132bd565b9350506001016116ae565b5060010161169f565b50604051630de022c160e11b815273__$b139f62619843504e83620ab3c72958bdd$__90631bc04582906117779087906004016143fe565b60006040518083038186803b15801561178f57600080fd5b505af41580156117a3573d6000803e3d6000fd5b505060405163652aa48360e01b81526000925073__$b139f62619843504e83620ab3c72958bdd$__915063652aa483906117e790889087906107d09060040161455d565b60206040518083038186803b1580156117ff57600080fd5b505af4158015611813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118379190613e1d565b6040516328e32c8560e11b81529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906351c6590a906118899060028504906004016143fe565b600060405180830381600087803b1580156118a357600080fd5b505af11580156118b7573d6000803e3d6000fd5b505050506118cf3360c883816118c957fe5b04612c95565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166387c3a09a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561192a57600080fd5b505af115801561193e573d6000803e3d6000fd5b505050506000821115611a585760015460405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263095ea7b3926119a0929190911690869060040161439e565b602060405180830381600087803b1580156119ba57600080fd5b505af11580156119ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f29190613deb565b506001546040516301acfa2360e51b81526001600160a01b039091169063359f446090611a25903090869060040161439e565b600060405180830381600087803b158015611a3f57600080fd5b505af1158015611a53573d6000803e3d6000fd5b505050505b857f09c223cfcd8c93e245f558f5f8de755fc0930fd9bc257441155ef5d54a170e0f3383604051611a8a92919061439e565b60405180910390a2505050505050565b600082118015611aaa5750600081135b611ab357600080fd5b60405163e7dc45d360e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e7dc45d390611b09903390606488029087906004016143b7565b602060405180830381600087803b158015611b2357600080fd5b505af1158015611b37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5b9190613e1d565b9050611b926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612d86565b336001600160a01b03167f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca8285604051610e0492919061454f565b611bd5613c52565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b4f0332f89896040518363ffffffff1660e01b8152600401611c2b92919061466a565b60a06040518083038186803b158015611c4357600080fd5b505afa158015611c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7b9190613e35565b94509450945094509450604051806101000160405280868152602001858152602001848152602001838152602001828152602001611cd3662386f26fc10000611ccd8789612fab90919063ffffffff16565b90613317565b8152602001611d046305f5e100611cfe611cef8c600f0b6133cf565b611cf88b613054565b906133e2565b9061343b565b8152602001611d296305f5e100611cfe611d208c600f0b6133cf565b611cf888613054565b905298975050505050505050565b60008111611d4457600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637d8c26596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611d9f57600080fd5b505af1158015611db3573d6000803e3d6000fd5b50506040516311f9fbc960e21b8152600092506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691506347e7ef2490611e0b903390606487029060040161439e565b602060405180830381600087803b158015611e2557600080fd5b505af1158015611e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5d9190613e1d565b9050611e946001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085612d86565b336001600160a01b03167f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca828460405161044892919061454f565b60608101511580611ee4575043816060015110155b611f005760405162461bcd60e51b8152600401610cfc90614424565b8051611f8f576002546040516354ba0f2760e01b81526001600160a01b03909116906354ba0f2790611f36903390600401614342565b602060405180830381600087803b158015611f5057600080fd5b505af1158015611f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f889190613e1d565b8152612036565b60025481516040516331a9108f60e11b815233926001600160a01b031691636352211e91611fc091906004016143fe565b60206040518083038186803b158015611fd857600080fd5b505afa158015611fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120109190613dcf565b6001600160a01b0316146120365760405162461bcd60e51b8152600401610cfc90614407565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637d8c26596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561209157600080fd5b505af11580156120a5573d6000803e3d6000fd5b5060009250829150505b8260200151518110156121805761217661216f6003600086600001518152602001908152602001600020856020015184815181106120e957fe5b60200260200101516000015186600001518760200151868151811061210a57fe5b6020026020010151602001518860200151878151811061212657fe5b6020026020010151604001518960200151888151811061214257fe5b6020026020010151606001518a60200151898151811061215e57fe5b6020026020010151608001516130d4565b83906132bd565b91506001016120af565b5080156122945760015460405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263095ea7b3926121dc929190911690859060040161439e565b602060405180830381600087803b1580156121f657600080fd5b505af115801561220a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222e9190613deb565b506001546040516301acfa2360e51b81526001600160a01b039091169063359f446090612261903090859060040161439e565b600060405180830381600087803b15801561227b57600080fd5b505af115801561228f573d6000803e3d6000fd5b505050505b81516000908152600360205260408082209084015173__$b139f62619843504e83620ab3c72958bdd$__9163e69e266d916122d0906064612fab565b8651600090815260036020908152604080832081516060810183528154600f90810b810b900b81526001820180548451818702810187019095528085526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016966382f3955d96612474969495948682019490939092909184015b828210156112d8576000848152602090206040805160a0810190915290600484020181606081018260028282826020028201916000905b82829054906101000a9004600f0b600f0b81526020019060100190602082600f01049283019260010382029150808411612389575050509284525050604080518082019182905260209093019291506001840190600290826000855b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f010492830192600103820291508084116123e55750505092845250506040805180820191829052602090930192915060028481019182845b8154815260200190600101908083116124495750505050508152505081526020019060010190612352565b6040518263ffffffff1660e01b815260040161249091906143d8565b60e06040518083038186803b1580156124a857600080fd5b505afa1580156124bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e09190614048565b6040518463ffffffff1660e01b81526004016124fe93929190614573565b60206040518083038186803b15801561251657600080fd5b505af415801561252a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254e9190613e1d565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166387c3a09a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156125ab57600080fd5b505af11580156125bf573d6000803e3d6000fd5b50505050600081131561264857606481056126057f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316333084612d86565b835160405133917ffc3608744ea5805574f007540fe37736bbebd81365de55991f3b17a16295521d9161263a9190859061454f565b60405180910390a2506126a2565b60008112156126a25760646000829003046126633382612c95565b835160405133917f41d0e87fb7cc3fb87474e510116fbe22a7658539f639b5de6d9c0bdae606d3eb916126989190859061454f565b60405180910390a2505b505050565b6126af6130af565b6001600160a01b03166126c06110b4565b6001600160a01b03161461271b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661272e57600080fd5b600180546001600160a01b0319166001600160a01b0383161790556040517fa10652b59c38f986e02273779b46014194b54d90e963da79e87af931cf6a484890612779908390614342565b60405180910390a150565b600082815260036020908152604080832081516060810183528154600f90810b810b900b8152600182018054845181870281018701909552808552869592948584019390929190879084015b828210156128f2576000848152602090206040805160a0810190915290600484020181606081018260028282826020028201916000905b82829054906101000a9004600f0b600f0b81526020019060100190602082600f01049283019260010382029150808411612807575050509284525050604080518082019182905260209093019291506001840190600290826000855b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f010492830192600103820291508084116128635750505092845250506040805180820191829052602090930192915060028481019182845b8154815260200190600101908083116128c757505050505081525050815260200190600101906127d0565b505050908252506002919091015460ff16151560209091015290506129bd836001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166382f3955d61294985612e1a565b6040518263ffffffff1660e01b815260040161296591906143d8565b60e06040518083038186803b15801561297d57600080fd5b505afa158015612991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b59190614048565b8391906134a2565b60649005949350505050565b6129d1613c97565b600082815260036020908152604080832081516060810183528154600f90810b810b900b81526001820180548451818702810187019095528085529195929486810194939192919084015b82821015612b3e576000848152602090206040805160a0810190915290600484020181606081018260028282826020028201916000905b82829054906101000a9004600f0b600f0b81526020019060100190602082600f01049283019260010382029150808411612a53575050509284525050604080518082019182905260209093019291506001840190600290826000855b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f01049283019260010382029150808411612aaf5750505092845250506040805180820191829052602090930192915060028481019182845b815481526020019060010190808311612b135750505050508152505081526020019060010190612a1c565b505050908252506002919091015460ff16151560209091015292915050565b612b656130af565b6001600160a01b0316612b766110b4565b6001600160a01b031614612bd1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116612c165760405162461bcd60e51b81526004018080602001828103825260268152602001806147746026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b612cc96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383613523565b5050565b600081831115612d2957604682840310612d13576040805162461bcd60e51b8152602060048201526002602482015261269960f11b604482015290519081900360640190fd5b612d2284838503600a0a61343b565b9050612d7f565b81831015612d7c57604683830310612d6d576040805162461bcd60e51b8152602060048201526002602482015261269960f11b604482015290519081900360640190fd5b612d2284848403600a0a6133e2565b50825b9392505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612de0908590613571565b50505050565b612cc96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383613523565b612e22613c34565b60005b6002811015612e5b57612e388382613622565b828260028110612e4457fe5b600f92830b90920b60209092020152600101612e25565b50919050565b600080612ec985600001518560028110612e7757fe5b6020020151600f0b612ec3612ea888602001518860028110612e9557fe5b60200201516001600160801b0316613683565b86602001518860028110612eb857fe5b6020020151906136c7565b90612fab565b6305f5e100900595945050505050565b600080612f1b85600001518560028110612eef57fe5b6020020151600f0b612ec3858760028110612f0657fe5b602002015188604001518860028110612eb857fe5b9050612f2e81662386f26fc10000613317565b95945050505050565b8151600090600f0b815b846020015151811015612f8357612f79612f7286602001518381518110612f6457fe5b60200260200101518661372c565b839061374b565b9150600101612f41565b509392505050565b600080612f9784612e1a565b9050612fa381846137b0565b949350505050565b600082612fba57506000610f92565b82600019148015612fce5750600160ff1b82145b1561300a5760405162461bcd60e51b815260040180806020018281038252602781526020018061484a6027913960400191505060405180910390fd5b8282028284828161301757fe5b0514612d7f5760405162461bcd60e51b815260040180806020018281038252602781526020018061484a6027913960400191505060405180910390fd5b6000808212156130ab576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b5090565b3390565b6000806130c08484612f37565b90506130cc8484612f8b565b139392505050565b600083600f0b6000146132ae5760008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633ed7e33c8b896040518363ffffffff1660e01b815260040161313492919061466a565b606060405180830381600087803b15801561314e57600080fd5b505af1158015613162573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318691906141ad565b92509250925061319d600088600f0b13848861391f565b6131b95760405162461bcd60e51b8152600401610cfc9061446e565b60008b73__$b139f62619843504e83620ab3c72958bdd$__63a8ffb3b990918b8e8c89896040518763ffffffff1660e01b81526004016131fe969594939291906145d3565b60206040518083038186803b15801561321657600080fd5b505af415801561322a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324e9190613e1d565b9050336001600160a01b03167fbfb264ae14733b7c7f6701d57d6a0dbaf244d34bf5912958835dccf887b4beea8b8b8e8c8989888e604051613297989796959493929190614692565b60405180910390a2606482049450505050506132b2565b5060005b979650505050505050565b600082820183811015612d7f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008161336b576040805162461bcd60e51b815260206004820181905260248201527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604482015290519081900360640190fd5b8160001914801561337f5750600160ff1b83145b156133bb5760405162461bcd60e51b81526004018080602001828103825260218152602001806148086021913960400191505060405180910390fd5b60008284816133c657fe5b05949350505050565b6000808212156130ab5781600003610f92565b6000826133f157506000610f92565b828202828482816133fe57fe5b0414612d7f5760405162461bcd60e51b81526004018080602001828103825260218152602001806148296021913960400191505060405180910390fd5b6000808211613491576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161349a57fe5b049392505050565b6000806134ae85612e1a565b905060005b6002811015613518576134f56134f08683600281106134ce57fe5b6020020151600f0b8484600281106134e257fe5b6020020151600f0b9061374b565b613948565b82826002811061350157fe5b600f92830b90920b602090920201526001016134b3565b50612f2e81846137b0565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526126a29084905b60006135c6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166139a99092919063ffffffff16565b8051909150156126a2578080602001905160208110156135e557600080fd5b50516126a25760405162461bcd60e51b815260040180806020018281038252602a8152602001806148bd602a913960400191505060405180910390fd5b6000805b83602001515181101561367c576136726134f08560200151838151811061364957fe5b602002602001015160000151856002811061366057fe5b6020020151600f85810b91900b61374b565b9150600101613626565b5092915050565b6000600160ff1b82106130ab5760405162461bcd60e51b81526004018080602001828103825260288152602001806148716028913960400191505060405180910390fd5b60008183038183128015906136dc5750838113155b806136f157506000831280156136f157508381135b612d7f5760405162461bcd60e51b81526004018080602001828103825260248152602001806148996024913960400191505060405180910390fd5b6000612d7f61373f8484606001516139b8565b61374985856139df565b905b60008282018183128015906137605750838112155b80613775575060008312801561377557508381125b612d7f5760405162461bcd60e51b81526004018080602001828103825260218152602001806147c16021913960400191505060405180910390fd5b6000806137f66305f5e100611ccd6137e5662386f26fc1000087604001516001600281106137da57fe5b60200201519061374b565b86516001600160801b031690612fab565b9050600061386161385c613835662386f26fc10000611ccd61382a662386f26fc100008a604001516000600281106137da57fe5b8a51600f0b90612fab565b61374968056bc75e2d63100000611ccd6002612ec38c600160200201518a90600f0b612fab565b6133cf565b905061389b61389461385c69d3c21bcecceda1000000611ccd8960016020020151600f0b612ec36002816101f48b612fab565b82906132bd565b9050600064e8d4a510006138cb83611cf888600001516001600160801b03166101f46133e290919063ffffffff16565b816138d257fe5b87519190049150600f0b1515806138ef57506020860151600f0b15155b80156138ff57506404a817c80081105b1561390c57506404a817c8005b61391581613683565b9695505050505050565b60008161392e57506001612d7f565b831561393e575080821115612d7f565b5080821015612d7f565b60006f7fffffffffffffffffffffffffffffff19821215801561396e57506001607f1b82125b6130ab5760405162461bcd60e51b815260040180806020018281038252602781526020018061479a6027913960400191505060405180910390fd5b6060612fa38484600085613a06565b60008060005b6002811015612f83576139d5612f72868387612ed9565b91506001016139be565b60008060005b6002811015612f83576139fc612f72868387612e61565b91506001016139e5565b606082471015613a475760405162461bcd60e51b81526004018080602001828103825260268152602001806147e26026913960400191505060405180910390fd5b613a5085613b56565b613aa1576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310613adf5780518252601f199092019160209182019101613ac0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613b41576040519150601f19603f3d011682016040523d82523d6000602084013e613b46565b606091505b50915091506132b2828286613b5c565b3b151590565b60608315613b6b575081612d7f565b825115613b7b5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613bc5578181015183820152602001613bad565b50505050905090810190601f168015613bf25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040518060a0016040528060008152602001600081526020016060815260200160608152602001613c2f613c97565b905290565b60405180604001604052806002906020820280368337509192915050565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806000600f0b8152602001606081526020016000151581525090565b600082601f830112613ccd578081fd5b6040516040810181811067ffffffffffffffff82111715613cea57fe5b8060405250808385604086011115613d00578384fd5b835b6002811015613d21578151835260209283019290910190600101613d02565b509195945050505050565b80518015158114610c4557600080fd5b600082601f830112613d4c578081fd5b813567ffffffffffffffff811115613d6057fe5b613d73601f8201601f1916602001614722565b818152846020838601011115613d87578283fd5b816020850160208301379081016020019190915292915050565b8035600f81900b8114610c4557600080fd5b600060208284031215613dc4578081fd5b8135612d7f81614746565b600060208284031215613de0578081fd5b8151612d7f81614746565b600060208284031215613dfc578081fd5b612d7f82613d2c565b600060208284031215613e16578081fd5b5035919050565b600060208284031215613e2e578081fd5b5051919050565b600080600080600060a08688031215613e4c578081fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b600060a08284031215613e85578081fd5b6040516080810181811067ffffffffffffffff82111715613ea257fe5b80604052508251815260208301516020820152613ec28460408501613cbd565b6040820152613ed360808401613d2c565b60608201529392505050565b600060208284031215613ef0578081fd5b67ffffffffffffffff8083351115613f06578182fd5b8235830160808186031215613f19578283fd5b604051608081018181108482111715613f2e57fe5b60405281358152602082013583811115613f46578485fd5b8201601f81018713613f56578485fd5b803584811115613f6257fe5b613f70602080830201614722565b818152602080820191908401885b8481101561401f578135860160a0818e03601f19011215613f9d578a8bfd5b60405160a081018181108c82111715613fb257fe5b80604052506020820135815260408201356020820152613fd460608301613da1565b60408201526080820135606082015260a08201358b811115613ff4578c8dfd5b6140038f602083860101613d3c565b6080830152508552506020938401939190910190600101613f7e565b505060208501525050506040828101359082015260609182013591810191909152949350505050565b600060e08284031215614059578081fd5b6040516080810181811067ffffffffffffffff8211171561407657fe5b60405282516140848161475e565b81526140938460208501613cbd565b60208201526140a58460608501613cbd565b6040820152613ed38460a08501613cbd565b6000602082840312156140c8578081fd5b8135612d7f8161475e565b600080606083850312156140e5578182fd5b82359150602084603f8501126140f9578182fd5b6040516040810181811067ffffffffffffffff8211171561411657fe5b604052808583016060870188101561412c578485fd5b845b60028110156141525761414082613da1565b8352918401919084019060010161412e565b50505080925050509250929050565b60008060408385031215614173578182fd5b8235915061418360208401613da1565b90509250929050565b6000806040838503121561419e578182fd5b50508035926020909101359150565b6000806000606084860312156141c1578081fd5b8351925060208401519150604084015190509250925092565b6000602082840312156141eb578081fd5b815160ff81168114612d7f578182fd5b6000815180845260208085019450808401835b8381101561423457614221878351614265565b604096909601959082019060010161420e565b509495945050505050565b8060005b6002811015612de0578151600f0b845260209384019390910190600101614243565b8060005b6002811015612de0578151845260209384019390910190600101614269565b15159052565b6000606083018251600f0b84526020808401516060828701528281518085526080945084880191508383019250855b8181101561432c5783516142d284825161423f565b8581015160408086018a5b60028110156143035783516001600160801b0316825292890192908901906001016142dd565b50509190910151905061431884880182614265565b509284019260c092909201916001016142bd565b5050604086015193506139156040880185614288565b6001600160a01b0391909116815260200190565b6001600160a01b0394909416845291151560208401526040830152606082015260800190565b6001600160a01b039290921682526001600160801b0316602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b60408101610f92828461423f565b92151583526020830191909152604082015260600190565b90815260200190565b60208082526003908201526228269960e91b604082015260600190565b6020808252600390820152620504d360ec1b604082015260600190565b6020808252601390820152723b30bab63a1034b9903737ba103230b733b2b960691b604082015260600190565b602080825260039082015262504d3160e81b604082015260600190565b602080825260039082015262504d3360e81b604082015260600190565b600060a082019050825182526020830151602083015260408301516144d06040840182614265565b5060608301511515608083015292915050565b600061010082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b600060208252612d7f602083018461428e565b918252602082015260400190565b9283526020830191909152604082015260600190565b838152602080820184905282516001600160801b031660408301528201516101208201906145a46060840182614265565b5060408301516145b760a0840182614265565b5060608301516145ca60e0840182614265565b50949350505050565b95865260208601949094526040850192909252600f0b6060840152608083015260a082015260c00190565b6000602082528251602083015260208301516040830152604083015160a0606084015261462e60c08401826141fb565b90506060840151601f198085840301608086015261464c83836141fb565b925060808601519150808584030160a086015250612f2e828261428e565b918252600f0b602082015260400190565b9182526001600160801b0316602082015260400190565b60006101008a835260208a8185015289604085015288600f0b60608501528760808501528660a08501528560c08501528160e0850152845180838601528392505b808310156146f2578583018201518584016101200152918101916146d3565b80831115614704578361012082870101525b601f01601f191693909301610120019b9a5050505050505050505050565b60405181810167ffffffffffffffff8111828210171561473e57fe5b604052919050565b6001600160a01b038116811461475b57600080fd5b50565b6001600160801b038116811461475b57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737353616665436173743a2076616c756520646f65736e27742066697420696e2031323820626974735369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f77536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220767f56330e223e055fe271f57c9827d52f684700657a27b3fc92a677531ce47a64736f6c63430007060033",
  "libraries": {
    "TraderVaultLib": "0x3eA022AB5e5703EEC733Edb55Ac9AB48Ebd32D0B"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addMargin(uint256,int256)": {
        "params": {
          "_marginToAdd": "amount of margin to add",
          "_vaultId": "id of the vault"
        }
      },
      "getLPTokenPrice(int256)": {
        "params": {
          "_deltaLiquidityAmount": "difference of liquidity If LPs want LP token price of deposit, _deltaLiquidityAmount is positive number of amount to deposit. On the other hand, if LPs want LP token price of withdrawal, _deltaLiquidityAmount is negative number of amount to withdraw."
        },
        "returns": {
          "_0": "LP token price scaled by 1e6"
        }
      },
      "getMinCollateralToAddPosition(uint256,int128[2])": {
        "params": {
          "_tradeAmounts": "amounts to trade",
          "_vaultId": "The id of target vault"
        },
        "returns": {
          "minCollateral": "scaled by 1e6"
        }
      },
      "getTokenAmountForHedging()": {
        "returns": {
          "_0": "Amount of USDC and underlying reqired for hedging"
        }
      },
      "getTradePrice(uint256,int128)": {
        "params": {
          "_productId": "product id",
          "_tradeAmount": "amount of position to trade. positive to get long price and negative to get short price."
        },
        "returns": {
          "_0": "trade info"
        }
      },
      "getVaultStatus(uint256)": {
        "params": {
          "_vaultId": "The id of target vault"
        },
        "returns": {
          "_0": "vault status"
        }
      },
      "initialize(uint256,int256)": {
        "params": {
          "_depositAmount": "deposit amount",
          "_initialFundingRate": "initial funding rate"
        }
      },
      "liquidateByPool(uint256)": {
        "params": {
          "_vaultId": "The id of target vault"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFeeRecepient(address)": {
        "params": {
          "_feeRecepient": "The address of new fee recepient"
        }
      },
      "trade((uint256,(uint256,uint256,int128,uint256,bytes)[],int256,uint256))": {
        "params": {
          "_tradeParams": "trade parameters"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "LIQUIDATION_FEE": {
        "details": "liquidation fee is 20%"
      }
    },
    "title": "Perpetual Market",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMargin(uint256,int256)": {
        "notice": "Add margin to the vault"
      },
      "constructor": {
        "notice": "Constructor of Perpetual Market contract"
      },
      "deposit(uint256)": {
        "notice": "Provides liquidity to the pool and mints LP tokens"
      },
      "execHedge()": {
        "notice": "Executes hedging"
      },
      "getLPTokenPrice(int256)": {
        "notice": "Gets current LP token price"
      },
      "getMinCollateralToAddPosition(uint256,int128[2])": {
        "notice": "Gets value of min collateral to add positions"
      },
      "getTokenAmountForHedging()": {
        "notice": "Gets token amount for hedging"
      },
      "getTradePrice(uint256,int128)": {
        "notice": "Gets trade price"
      },
      "getVaultStatus(uint256)": {
        "notice": "Gets position value of a vault"
      },
      "initialize(uint256,int256)": {
        "notice": "Initializes Perpetual Pool"
      },
      "liquidateByPool(uint256)": {
        "notice": "Liquidates a vault by Pool Anyone can liquidate a vault whose PositionValue is less than MinCollateral. The caller gets a portion of the margin as reward."
      },
      "setFeeRecepient(address)": {
        "notice": "Sets new fee recepient"
      },
      "trade((uint256,(uint256,uint256,int128,uint256,bytes)[],int256,uint256))": {
        "notice": "Opens new positions or closes hold position of the perpetual contracts and manage margin in the vault at the same time."
      },
      "withdraw(uint128)": {
        "notice": "Withdraws liquidity from the pool and burn LP tokens"
      }
    },
    "notice": "Perpetual Market Contract is entry point of traders and liquidity providers. It manages traders' vault storage and holds funds from traders and liquidity providers. Error Codes PM0: tx exceed deadline PM1: limit price PM2: caller is not vault owner PM3: vault not found",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/PerpetualMarket.sol:PerpetualMarket",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6840,
        "contract": "contracts/PerpetualMarket.sol:PerpetualMarket",
        "label": "feeRecepient",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFeePool)11672"
      },
      {
        "astId": 6842,
        "contract": "contracts/PerpetualMarket.sol:PerpetualMarket",
        "label": "vaultNFT",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6846,
        "contract": "contracts/PerpetualMarket.sol:PerpetualMarket",
        "label": "traderVaults",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(TraderVault)13742_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_int128)2_storage": {
        "base": "t_int128",
        "encoding": "inplace",
        "label": "int128[2]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)2_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_struct(SubVault)13734_storage)dyn_storage": {
        "base": "t_struct(SubVault)13734_storage",
        "encoding": "dynamic_array",
        "label": "struct TraderVaultLib.SubVault[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint128)2_storage": {
        "base": "t_uint128",
        "encoding": "inplace",
        "label": "uint128[2]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFeePool)11672": {
        "encoding": "inplace",
        "label": "contract IFeePool",
        "numberOfBytes": "20"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_struct(TraderVault)13742_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TraderVaultLib.TraderVault)",
        "numberOfBytes": "32",
        "value": "t_struct(TraderVault)13742_storage"
      },
      "t_struct(SubVault)13734_storage": {
        "encoding": "inplace",
        "label": "struct TraderVaultLib.SubVault",
        "members": [
          {
            "astId": 13725,
            "contract": "contracts/PerpetualMarket.sol:PerpetualMarket",
            "label": "positionPerpetuals",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_int128)2_storage"
          },
          {
            "astId": 13729,
            "contract": "contracts/PerpetualMarket.sol:PerpetualMarket",
            "label": "entryPrices",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint128)2_storage"
          },
          {
            "astId": 13733,
            "contract": "contracts/PerpetualMarket.sol:PerpetualMarket",
            "label": "entryFundingFee",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_int256)2_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TraderVault)13742_storage": {
        "encoding": "inplace",
        "label": "struct TraderVaultLib.TraderVault",
        "members": [
          {
            "astId": 13736,
            "contract": "contracts/PerpetualMarket.sol:PerpetualMarket",
            "label": "positionUsdc",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 13739,
            "contract": "contracts/PerpetualMarket.sol:PerpetualMarket",
            "label": "subVaults",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(SubVault)13734_storage)dyn_storage"
          },
          {
            "astId": 13741,
            "contract": "contracts/PerpetualMarket.sol:PerpetualMarket",
            "label": "isInsolvent",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}